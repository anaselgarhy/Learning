<!DOCTYPE html>
<!-- saved from url=(0034)https://jacko.io/firehose_of_rust/ -->
<html class="reveal-full-page"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
        
        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">

        <title>Firehose of Rust</title>

        <link rel="stylesheet" href="./Firehose of Rust_files/reset.css">
        <link rel="stylesheet" href="./Firehose of Rust_files/reveal.css">
        <link rel="stylesheet" href="./Firehose of Rust_files/solarized.css" id="theme">

        <!-- Theme used for syntax highlighted code -->
        <link rel="stylesheet" href="./Firehose of Rust_files/solarized-dark.css" id="highlight-theme">

        <link rel="preconnect" href="https://fonts.gstatic.com/">
        <link href="./Firehose of Rust_files/css2" rel="stylesheet">
<style>
.container{
    display: flex;
}
.col{
    flex: 1;
}
tt{
    background-color: #eee8d5;
    padding: 0 .1em;
    border-radius: .2em;
    font-family: 'Ubuntu Mono', monospace;
}
.reveal pre code{
    font-family: 'Ubuntu Mono', monospace;
    max-height: none;
}
.reveal pre ::selection{
    color: #657b83;
    background: #fdf6e3;
}
.wrap {
    display: inline-block;
    text-align: left;
}
</style>
    <style type="text/css">.hljs-ln{border-collapse:collapse}.hljs-ln td{padding:0}.hljs-ln-n:before{content:attr(data-line-number)}</style><style type="text/css">@font-face { font-family: Roboto; src: url("chrome-extension://mcgbeeipkmelnpldkobichboakdfaeon/css/Roboto-Regular.ttf"); }</style></head>
    <body class="reveal-viewport" style="--slide-width:100%px; --slide-height:100%px;" data-new-gr-c-s-check-loaded="14.1070.0" data-gr-ext-installed="">
        <div class="reveal none center focused has-horizontal-slides ready" role="application" data-transition-speed="default" data-background-transition="fade" style="cursor: none;">
            <div class="slides" style="width: 1920px; height: 889px;">
                <section style="top: 293px; display: block;" class="present">
                    <h1>A <span style="color: #dc322f">Firehose</span> of Rust</h1>
                    <h2>for busy people who know some C++</h2>
                </section>

                <section data-markdown="" data-markdown-parsed="true" style="top: 88.5px; display: block;" hidden="" aria-hidden="true" class="future"><div class="wrap">
<p>Rust is a big language. We don't have time for:</p>

<ul>
<li>syntax</li>
<li>enums (tagged unions) and <tt>Option</tt></li>
<li>error handling with <tt>Result</tt> and <tt>?</tt></li>
<li>generics (templates) and traits</li>
<li><tt>unsafe</tt> code</li>
<li><tt>extern</tt> and interoperating with C</li>
<li>Cargo</li>
</ul>
<p>Instead, we're going to focus on three big ideas:</p>

<ul>
<li>references</li>
<li>mutable aliasing</li>
<li>move semantics</li></ul></div>


</section>

                <section data-markdown="" data-markdown-parsed="true" style="top: 40.5px; display: block;" hidden="" aria-hidden="true" class="future"><h1 id="references-and-mutable-aliasing">References and Mutable Aliasing</h1>
<p><strong>shared references</strong>, <tt>&amp;T</tt>, like <tt>const</tt> pointers in C/C++</p>
<p><strong>mutable references</strong>, <tt>&amp;mut T</tt>, like non-<tt>const</tt> pointers in C/C++</p>
<p>References don't keep things alive. There is no garbage collector.</p>
<h2 id="big-idea-1">BIG IDEA #1</h2>
<p>References are always valid. No dangling pointers.</p>
<h2 id="big-idea-2">BIG IDEA #2</h2>
<p>Mutable references are unique. No mutable aliasing.</p>
</section>




                <section data-markdown="" data-markdown-parsed="true" style="top: 476px; display: none;" hidden="" aria-hidden="true" class="future"><h1 id="big-idea-1">BIG IDEA #1</h1>
<p>References are always valid. No dangling pointers.</p>
</section>




                <section style="font-size: 2em; top: 476px; display: none;" hidden="" aria-hidden="true" class="future">
                    A dangling pointer
                    <div class="container">
                        <div class="col">
                            C++
                            <pre class="cpp" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> *my_int_ptr;
{
  <span class="hljs-keyword">int</span> my_int = <span class="hljs-number">5</span>;
  my_int_ptr = &amp;my_int;
}
<span class="hljs-built_in">cout</span> &lt;&lt; *my_int_ptr;</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                        </div>
                        <div class="col">
                            Rust
                            <pre class="rust" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-keyword">let</span> my_int_ptr: &amp;<span class="hljs-built_in">i32</span>;
{
    <span class="hljs-keyword">let</span> my_int: <span class="hljs-built_in">i32</span> = <span class="hljs-number">5</span>;
    my_int_ptr = &amp;my_int;
}
dbg!(*my_int_ptr);</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                        </div>
                    </div>
                </section>
                <section style="font-size: 1.5em; top: 476px; display: none;" hidden="" aria-hidden="true" class="future">
                    C++
                            <pre class="cpp" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> *my_int_ptr;
{
  <span class="hljs-keyword">int</span> my_int = <span class="hljs-number">5</span>;
  my_int_ptr = &amp;my_int;
}
<span class="hljs-built_in">cout</span> &lt;&lt; *my_int_ptr;</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                            <pre style="position: relative;"><code data-trim="" class="hljs angelscript">==<span class="hljs-number">22092</span>==ERROR: AddressSanitizer: stack-use-after-scope on address <span class="hljs-number">0x7fff2648dfe0</span> at pc <span class="hljs-number">0x557a54f3a306</span> bp <span class="hljs-number">0x7fff2648dfa0</span> sp <span class="hljs-number">0x7fff2648df90</span>
READ of size <span class="hljs-number">4</span> at <span class="hljs-number">0x7fff2648dfe0</span> thread T0
    #<span class="hljs-number">0</span> <span class="hljs-number">0x557a54f3a305</span> <span class="hljs-keyword">in</span> main (/home/jacko/cpp_rust_talk/<span class="hljs-number">1.</span>a.lifetimes/simple_scope+<span class="hljs-number">0x1305</span>)
    #<span class="hljs-number">1</span> <span class="hljs-number">0x7f76b8ba6b24</span> <span class="hljs-keyword">in</span> __libc_start_main (/usr/lib/libc.so<span class="hljs-number">.6</span>+<span class="hljs-number">0x27b24</span>)
    #<span class="hljs-number">2</span> <span class="hljs-number">0x557a54f3a12d</span> <span class="hljs-keyword">in</span> _start (/home/jacko/cpp_rust_talk/<span class="hljs-number">1.</span>a.lifetimes/simple_scope+<span class="hljs-number">0x112d</span>)</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                </section>

                <section style="font-size: 1.5em; top: 476px; display: none;" hidden="" aria-hidden="true" class="future">
                    Rust
                            <pre class="rust" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-keyword">let</span> my_int_ptr: &amp;<span class="hljs-built_in">i32</span>;
{
    <span class="hljs-keyword">let</span> my_int: <span class="hljs-built_in">i32</span> = <span class="hljs-number">5</span>;
    my_int_ptr = &amp;my_int;
}
dbg!(*my_int_ptr);</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                            <pre style="position: relative;"><code data-trim="" class="hljs coq">error[E0597]: `my_int` does not live long <span class="hljs-built_in">enough</span>
 --&gt; src/main.rs:<span class="hljs-number">5</span>:<span class="hljs-number">22</span>
  |
<span class="hljs-type">5</span> |         <span class="hljs-type">my_int_ptr</span> = &amp;my_int;
  |                      <span class="hljs-type">^^^^^^^ borrowed</span> value does not live long <span class="hljs-built_in">enough</span>
<span class="hljs-number">6</span> |     <span class="hljs-type">}
  |     - `my_int</span>` dropped here while still borrowed
<span class="hljs-number">7</span> |     <span class="hljs-type">dbg</span>!<span class="hljs-comment">(*my_int_ptr);
  |          ----------- borrow later used here</span></code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                </section>



                <section style="font-size: 1.75em; top: 476px; display: none;" hidden="" aria-hidden="true" class="future">
                    A borrowing view
                    <div class="container">
                        <div class="col">
                            C++
                            <pre class="cpp" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-built_in">string</span> my_string =
    <span class="hljs-string">"abcdefghijklmnopqrstuvwxy"</span>;
string_view my_string_view =
    my_string + <span class="hljs-string">"z"</span>;
<span class="hljs-built_in">cout</span> &lt;&lt; my_string_view;</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                        </div>
                        <div class="col">
                            Rust
                            <pre class="rust" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-keyword">let</span> my_string: <span class="hljs-built_in">String</span> =
    <span class="hljs-string">"abcdefghijklmnopqrstuvwxy"</span>.to_string();
<span class="hljs-keyword">let</span> my_string_view: &amp;<span class="hljs-built_in">str</span> =
    (my_string + <span class="hljs-string">"z"</span>).as_str();
dbg!(my_string_view);</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                        </div>
                    </div>
                </section>
                <section style="font-size: 1.5em; top: 476px; display: none;" hidden="" aria-hidden="true" class="future">
                            C++
                            <pre class="cpp" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-built_in">string</span> my_string =
    <span class="hljs-string">"abcdefghijklmnopqrstuvwxy"</span>;
string_view my_string_view =
    my_string + <span class="hljs-string">"z"</span>;
<span class="hljs-built_in">cout</span> &lt;&lt; my_string_view;</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                            <pre style="position: relative;"><code data-trim="" class="hljs gradle">==<span class="hljs-number">24774</span>==ERROR: AddressSanitizer: heap-use-after-free on address <span class="hljs-number">0</span>x6060000000e0 at pc <span class="hljs-number">0</span>x7f63fa6020b6 bp <span class="hljs-number">0</span>x7fff1828aa30 sp <span class="hljs-number">0</span>x7fff1828a1d8
<span class="hljs-keyword">READ</span> of <span class="hljs-keyword">size</span> <span class="hljs-number">26</span> at <span class="hljs-number">0</span>x6060000000e0 thread T0
    #<span class="hljs-number">0</span> <span class="hljs-number">0</span>x7f63fa6020b5 in __interceptor_fwrite <span class="hljs-regexp">/build/g</span>cc<span class="hljs-regexp">/src/g</span>cc<span class="hljs-regexp">/libsanitizer/</span>sanitizer_common/sanitizer_common_interceptors.inc:<span class="hljs-number">1139</span>
    #<span class="hljs-number">1</span> <span class="hljs-number">0</span>x7f63fa512d13 in std::basic_streambuf&lt;<span class="hljs-keyword">char</span>, std::char_traits&lt;<span class="hljs-keyword">char</span>&gt; &gt;::sputn(<span class="hljs-keyword">char</span> const*, <span class="hljs-keyword">long</span>) <span class="hljs-regexp">/build/g</span>cc<span class="hljs-regexp">/src/g</span>cc-build<span class="hljs-regexp">/x86_64-pc-linux-gnu/</span>libstdc++-v3<span class="hljs-regexp">/include/</span>streambuf:<span class="hljs-number">458</span>
    #<span class="hljs-number">2</span> <span class="hljs-number">0</span>x7f63fa512d13 in <span class="hljs-keyword">void</span> std::__ostream_write&lt;<span class="hljs-keyword">char</span>, std::char_traits&lt;<span class="hljs-keyword">char</span>&gt; &gt;(std::basic_ostream&lt;<span class="hljs-keyword">char</span>, std::char_traits&lt;<span class="hljs-keyword">char</span>&gt; &gt;&amp;, <span class="hljs-keyword">char</span> const*, <span class="hljs-keyword">long</span>) <span class="hljs-regexp">/build/g</span>cc<span class="hljs-regexp">/src/g</span>cc-build/x86_64-pc-lin
ux-gnu<span class="hljs-regexp">/libstdc++-v3/i</span>nclude<span class="hljs-regexp">/bits/</span>ostream_insert.h:<span class="hljs-number">50</span>
    #<span class="hljs-number">3</span> <span class="hljs-number">0</span>x7f63fa512d13 in std::basic_ostream&lt;<span class="hljs-keyword">char</span>, std::char_traits&lt;<span class="hljs-keyword">char</span>&gt; &gt;&amp; std::__ostream_insert&lt;<span class="hljs-keyword">char</span>, std::char_traits&lt;<span class="hljs-keyword">char</span>&gt; &gt;(std::basic_ostream&lt;<span class="hljs-keyword">char</span>, std::char_traits&lt;<span class="hljs-keyword">char</span>&gt; &gt;&amp;, <span class="hljs-keyword">char</span> const
*, <span class="hljs-keyword">long</span>) <span class="hljs-regexp">/build/g</span>cc<span class="hljs-regexp">/src/g</span>cc-build<span class="hljs-regexp">/x86_64-pc-linux-gnu/</span>libstdc++-v3<span class="hljs-regexp">/include/</span>bits/ostream_insert.h:<span class="hljs-number">101</span>
    #<span class="hljs-number">4</span> <span class="hljs-number">0</span>x55a0098b0cba in std::basic_ostream&lt;<span class="hljs-keyword">char</span>, std::char_traits&lt;<span class="hljs-keyword">char</span>&gt; &gt;&amp; std::operator&lt;&lt; &lt;<span class="hljs-keyword">char</span>, std::char_traits&lt;<span class="hljs-keyword">char</span>&gt; &gt;(std::basic_ostream&lt;<span class="hljs-keyword">char</span>, std::char_traits&lt;<span class="hljs-keyword">char</span>&gt; &gt;&amp;, std::basic_stri
ng_view&lt;<span class="hljs-keyword">char</span>, std::char_traits&lt;<span class="hljs-keyword">char</span>&gt; &gt;) (<span class="hljs-regexp">/home/</span>jacko<span class="hljs-regexp">/cpp_rust_talk/</span><span class="hljs-number">1</span>.a.lifetimes/string_view+<span class="hljs-number">0</span>x2cba)
    #<span class="hljs-number">5</span> <span class="hljs-number">0</span>x55a0098b0627 in main (<span class="hljs-regexp">/home/</span>jacko<span class="hljs-regexp">/cpp_rust_talk/</span><span class="hljs-number">1</span>.a.lifetimes/string_view+<span class="hljs-number">0</span>x2627)
    #<span class="hljs-number">6</span> <span class="hljs-number">0</span>x7f63fa0e0b24 in __libc_start_main (<span class="hljs-regexp">/usr/</span>lib/libc.so.<span class="hljs-number">6</span>+<span class="hljs-number">0</span>x27b24)
    #<span class="hljs-number">7</span> <span class="hljs-number">0</span>x55a0098b030d in _start (<span class="hljs-regexp">/home/</span>jacko<span class="hljs-regexp">/cpp_rust_talk/</span><span class="hljs-number">1</span>.a.lifetimes/string_view+<span class="hljs-number">0</span>x230d)</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                </section>

                <section style="font-size: 1.4em; top: 476px; display: none;" hidden="" aria-hidden="true" class="future">
                            Rust
                            <pre class="rust" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-keyword">let</span> my_string: <span class="hljs-built_in">String</span> =
    <span class="hljs-string">"abcdefghijklmnopqrstuvwxy"</span>.to_string();
<span class="hljs-keyword">let</span> my_string_view: &amp;<span class="hljs-built_in">str</span> =
    (my_string + <span class="hljs-string">"z"</span>).as_str();
dbg!(my_string_view);</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                            <pre style="width: 90%; position: relative;"><code data-trim="" class="hljs pgsql">error[E0716]: <span class="hljs-keyword">temporary</span> <span class="hljs-keyword">value</span> dropped <span class="hljs-keyword">while</span> borrowed
 <span class="hljs-comment">--&gt; src/main.rs:5:9</span>
  |
<span class="hljs-number">5</span> |         (my_string + "z").as_str();
  |         ^^^^^^^^^^^^^^^^^         - <span class="hljs-keyword">temporary</span> <span class="hljs-keyword">value</span> <span class="hljs-keyword">is</span> freed at the <span class="hljs-keyword">end</span> <span class="hljs-keyword">of</span> this <span class="hljs-keyword">statement</span>
  |         |
  |         creates a <span class="hljs-keyword">temporary</span> which <span class="hljs-keyword">is</span> freed <span class="hljs-keyword">while</span> still <span class="hljs-keyword">in</span> use
<span class="hljs-number">6</span> |     dbg!(my_string_view);
  |          <span class="hljs-comment">-------------- borrow later used here</span>
  |
  = note: consider <span class="hljs-keyword">using</span> a `let` binding <span class="hljs-keyword">to</span> <span class="hljs-keyword">create</span> a longer lived <span class="hljs-keyword">value</span></code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                </section>



                <section style="font-size: 1.5em; top: 476px; display: none;" hidden="" aria-hidden="true" class="future">
                    A long-lived container
                    <div class="container">
                        <div class="col">
                            C++
                            <pre class="cpp" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-built_in">vector</span>&lt;string_view&gt; my_vector;
{
  <span class="hljs-built_in">string</span> my_string = <span class="hljs-string">"hello world"</span>;
  my_vector.push_back(my_string);
}
<span class="hljs-built_in">cout</span> &lt;&lt; my_vector[<span class="hljs-number">0</span>];</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                        </div>
                        <div class="col">
                            Rust
                            <pre class="rust" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> my_vector: <span class="hljs-built_in">Vec</span>&lt;&amp;<span class="hljs-built_in">str</span>&gt; = <span class="hljs-built_in">Vec</span>::new();
{
    <span class="hljs-keyword">let</span> my_string = <span class="hljs-string">"hello world"</span>.to_string();
    my_vector.push(&amp;my_string);
}
dbg!(my_vector);</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                        </div>
                    </div>
                </section>
                <section style="font-size: 1.5em; top: 476px; display: none;" hidden="" aria-hidden="true" class="future">
                            C++
                            <pre class="cpp" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-built_in">vector</span>&lt;string_view&gt; my_vector;
{
  <span class="hljs-built_in">string</span> my_string = <span class="hljs-string">"hello world"</span>;
  my_vector.push_back(my_string);
}
<span class="hljs-built_in">cout</span> &lt;&lt; my_vector[<span class="hljs-number">0</span>];</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                            <pre style="position: relative;"><code data-trim="" class="hljs gradle">==<span class="hljs-number">27916</span>==ERROR: AddressSanitizer: stack-use-after-scope on address <span class="hljs-number">0</span>x7ffeabade130 at pc <span class="hljs-number">0</span>x7f260741b0b6 bp <span class="hljs-number">0</span>x7ffeabaddf30 sp <span class="hljs-number">0</span>x7ffeabadd6d8
<span class="hljs-keyword">READ</span> of <span class="hljs-keyword">size</span> <span class="hljs-number">11</span> at <span class="hljs-number">0</span>x7ffeabade130 thread T0
    #<span class="hljs-number">0</span> <span class="hljs-number">0</span>x7f260741b0b5 in __interceptor_fwrite <span class="hljs-regexp">/build/g</span>cc<span class="hljs-regexp">/src/g</span>cc<span class="hljs-regexp">/libsanitizer/</span>sanitizer_common/sanitizer_common_interceptors.inc:<span class="hljs-number">1139</span>
    #<span class="hljs-number">1</span> <span class="hljs-number">0</span>x7f260732bd13 in std::basic_streambuf&lt;<span class="hljs-keyword">char</span>, std::char_traits&lt;<span class="hljs-keyword">char</span>&gt; &gt;::sputn(<span class="hljs-keyword">char</span> const*, <span class="hljs-keyword">long</span>) <span class="hljs-regexp">/build/g</span>cc<span class="hljs-regexp">/src/g</span>cc-build<span class="hljs-regexp">/x86_64-pc-linux-gnu/</span>libstdc++-v3<span class="hljs-regexp">/include/</span>streambuf:<span class="hljs-number">458</span>
    #<span class="hljs-number">2</span> <span class="hljs-number">0</span>x7f260732bd13 in <span class="hljs-keyword">void</span> std::__ostream_write&lt;<span class="hljs-keyword">char</span>, std::char_traits&lt;<span class="hljs-keyword">char</span>&gt; &gt;(std::basic_ostream&lt;<span class="hljs-keyword">char</span>, std::char_traits&lt;<span class="hljs-keyword">char</span>&gt; &gt;&amp;, <span class="hljs-keyword">char</span> const*, <span class="hljs-keyword">long</span>) <span class="hljs-regexp">/build/g</span>cc<span class="hljs-regexp">/src/g</span>cc-build/x86_64-pc-lin
ux-gnu<span class="hljs-regexp">/libstdc++-v3/i</span>nclude<span class="hljs-regexp">/bits/</span>ostream_insert.h:<span class="hljs-number">50</span>
    #<span class="hljs-number">3</span> <span class="hljs-number">0</span>x7f260732bd13 in std::basic_ostream&lt;<span class="hljs-keyword">char</span>, std::char_traits&lt;<span class="hljs-keyword">char</span>&gt; &gt;&amp; std::__ostream_insert&lt;<span class="hljs-keyword">char</span>, std::char_traits&lt;<span class="hljs-keyword">char</span>&gt; &gt;(std::basic_ostream&lt;<span class="hljs-keyword">char</span>, std::char_traits&lt;<span class="hljs-keyword">char</span>&gt; &gt;&amp;, <span class="hljs-keyword">char</span> const
*, <span class="hljs-keyword">long</span>) <span class="hljs-regexp">/build/g</span>cc<span class="hljs-regexp">/src/g</span>cc-build<span class="hljs-regexp">/x86_64-pc-linux-gnu/</span>libstdc++-v3<span class="hljs-regexp">/include/</span>bits/ostream_insert.h:<span class="hljs-number">101</span>
    #<span class="hljs-number">4</span> <span class="hljs-number">0</span>x55b1c18ddec4 in std::basic_ostream&lt;<span class="hljs-keyword">char</span>, std::char_traits&lt;<span class="hljs-keyword">char</span>&gt; &gt;&amp; std::operator&lt;&lt; &lt;<span class="hljs-keyword">char</span>, std::char_traits&lt;<span class="hljs-keyword">char</span>&gt; &gt;(std::basic_ostream&lt;<span class="hljs-keyword">char</span>, std::char_traits&lt;<span class="hljs-keyword">char</span>&gt; &gt;&amp;, std::basic_stri
ng_view&lt;<span class="hljs-keyword">char</span>, std::char_traits&lt;<span class="hljs-keyword">char</span>&gt; &gt;) (<span class="hljs-regexp">/home/</span>jacko<span class="hljs-regexp">/cpp_rust_talk/</span><span class="hljs-number">1</span>.a.lifetimes/vector_push+<span class="hljs-number">0</span>x2ec4)
    #<span class="hljs-number">5</span> <span class="hljs-number">0</span>x55b1c18dd602 in main (<span class="hljs-regexp">/home/</span>jacko<span class="hljs-regexp">/cpp_rust_talk/</span><span class="hljs-number">1</span>.a.lifetimes/vector_push+<span class="hljs-number">0</span>x2602)
    #<span class="hljs-number">6</span> <span class="hljs-number">0</span>x7f2606ef9b24 in __libc_start_main (<span class="hljs-regexp">/usr/</span>lib/libc.so.<span class="hljs-number">6</span>+<span class="hljs-number">0</span>x27b24)
    #<span class="hljs-number">7</span> <span class="hljs-number">0</span>x55b1c18dd32d in _start (<span class="hljs-regexp">/home/</span>jacko<span class="hljs-regexp">/cpp_rust_talk/</span><span class="hljs-number">1</span>.a.lifetimes/vector_push+<span class="hljs-number">0</span>x232d)</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                </section>
                <section style="font-size: 1.5em; top: 476px; display: none;" hidden="" aria-hidden="true" class="future">
                            Rust
                            <pre class="rust" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> my_vector: <span class="hljs-built_in">Vec</span>&lt;&amp;<span class="hljs-built_in">str</span>&gt; = <span class="hljs-built_in">Vec</span>::new();
{
    <span class="hljs-keyword">let</span> my_string = <span class="hljs-string">"hello world"</span>.to_string();
    my_vector.push(&amp;my_string);
}
dbg!(my_vector);</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                            <pre style="width: 90%; position: relative;"><code data-trim="" class="hljs coq">error[E0597]: `my_string` does not live long <span class="hljs-built_in">enough</span>
 --&gt; src/main.rs:<span class="hljs-number">5</span>:<span class="hljs-number">24</span>
  |
<span class="hljs-type">5</span> |         <span class="hljs-type">my_vector</span>.push(&amp;my_string);
  |                        <span class="hljs-type">^^^^^^^^^^ borrowed</span> value does not live long <span class="hljs-built_in">enough</span>
<span class="hljs-number">6</span> |     <span class="hljs-type">}
  |     - `my_string</span>` dropped here while still borrowed
<span class="hljs-number">7</span> |     <span class="hljs-type">dbg</span>!(my_vector);
  |          <span class="hljs-type">--------- borrow</span> later used here</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                </section>



                <section style="font-size: 1.2em; top: 476px; display: none;" hidden="" aria-hidden="true" class="future">
                    An invalid function
                    <div class="container">
                        <div class="col">
                            C++
                            <pre class="cpp" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">my_push_back</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;string_view&gt; &amp;v, string_view s)</span> </span>{
  v.push_back(s);
}

<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{
  <span class="hljs-built_in">vector</span>&lt;string_view&gt; my_vector;
  {
    <span class="hljs-built_in">string</span> my_string = <span class="hljs-string">"hello world"</span>;
    my_push_back(my_vector, my_string);
  }
  <span class="hljs-built_in">cout</span> &lt;&lt; my_vector[<span class="hljs-number">0</span>];
}</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                        </div>
                        <div class="col">
                            Rust
                            <pre class="rust" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">my_push_back</span></span>(v: &amp;<span class="hljs-keyword">mut</span> <span class="hljs-built_in">Vec</span>&lt;&amp;<span class="hljs-built_in">str</span>&gt;, s: &amp;<span class="hljs-built_in">str</span>) {
    v.push(s);
}

<span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">main</span></span>() {
    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> my_vector: <span class="hljs-built_in">Vec</span>&lt;&amp;<span class="hljs-built_in">str</span>&gt; = <span class="hljs-built_in">Vec</span>::new();
    {
        <span class="hljs-keyword">let</span> my_string = <span class="hljs-string">"hello world"</span>.to_string();
        my_push_back(&amp;<span class="hljs-keyword">mut</span> my_vector, &amp;my_string);
    }
    dbg!(my_vector);
}</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                        </div>
                    </div>
                </section>
                <section style="font-size: 1.2em; top: 476px; display: none;" hidden="" aria-hidden="true" class="future">
                            C++
                            <pre class="cpp" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">my_push_back</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;string_view&gt; &amp;v, string_view s)</span> </span>{
  v.push_back(s);
}

<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{
  <span class="hljs-built_in">vector</span>&lt;string_view&gt; my_vector;
  {
    <span class="hljs-built_in">string</span> my_string = <span class="hljs-string">"hello world"</span>;
    my_push_back(my_vector, my_string);
  }
  <span class="hljs-built_in">cout</span> &lt;&lt; my_vector[<span class="hljs-number">0</span>];
}</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                            <pre style="position: relative;"><code data-trim="" class="hljs gradle">==<span class="hljs-number">29475</span>==ERROR: AddressSanitizer: stack-use-after-scope on address <span class="hljs-number">0</span>x7ffe1aa46e00 at pc <span class="hljs-number">0</span>x7fcb06d9d0b6 bp <span class="hljs-number">0</span>x7ffe1aa46c20 sp <span class="hljs-number">0</span>x7ffe1aa463c8
<span class="hljs-keyword">READ</span> of <span class="hljs-keyword">size</span> <span class="hljs-number">11</span> at <span class="hljs-number">0</span>x7ffe1aa46e00 thread T0
    #<span class="hljs-number">0</span> <span class="hljs-number">0</span>x7fcb06d9d0b5 in __interceptor_fwrite <span class="hljs-regexp">/build/g</span>cc<span class="hljs-regexp">/src/g</span>cc<span class="hljs-regexp">/libsanitizer/</span>sanitizer_common/sanitizer_common_interceptors.inc:<span class="hljs-number">1139</span>
    #<span class="hljs-number">1</span> <span class="hljs-number">0</span>x7fcb06cadd13 in std::basic_streambuf&lt;<span class="hljs-keyword">char</span>, std::char_traits&lt;<span class="hljs-keyword">char</span>&gt; &gt;::sputn(<span class="hljs-keyword">char</span> const*, <span class="hljs-keyword">long</span>) <span class="hljs-regexp">/build/g</span>cc<span class="hljs-regexp">/src/g</span>cc-build<span class="hljs-regexp">/x86_64-pc-linux-gnu/</span>libstdc++-v3<span class="hljs-regexp">/include/</span>streambuf:<span class="hljs-number">458</span>
    #<span class="hljs-number">2</span> <span class="hljs-number">0</span>x7fcb06cadd13 in <span class="hljs-keyword">void</span> std::__ostream_write&lt;<span class="hljs-keyword">char</span>, std::char_traits&lt;<span class="hljs-keyword">char</span>&gt; &gt;(std::basic_ostream&lt;<span class="hljs-keyword">char</span>, std::char_traits&lt;<span class="hljs-keyword">char</span>&gt; &gt;&amp;, <span class="hljs-keyword">char</span> const*, <span class="hljs-keyword">long</span>) <span class="hljs-regexp">/build/g</span>cc<span class="hljs-regexp">/src/g</span>cc-build/x86_64-pc-lin
ux-gnu<span class="hljs-regexp">/libstdc++-v3/i</span>nclude<span class="hljs-regexp">/bits/</span>ostream_insert.h:<span class="hljs-number">50</span>
    #<span class="hljs-number">3</span> <span class="hljs-number">0</span>x7fcb06cadd13 in std::basic_ostream&lt;<span class="hljs-keyword">char</span>, std::char_traits&lt;<span class="hljs-keyword">char</span>&gt; &gt;&amp; std::__ostream_insert&lt;<span class="hljs-keyword">char</span>, std::char_traits&lt;<span class="hljs-keyword">char</span>&gt; &gt;(std::basic_ostream&lt;<span class="hljs-keyword">char</span>, std::char_traits&lt;<span class="hljs-keyword">char</span>&gt; &gt;&amp;, <span class="hljs-keyword">char</span> const
*, <span class="hljs-keyword">long</span>) <span class="hljs-regexp">/build/g</span>cc<span class="hljs-regexp">/src/g</span>cc-build<span class="hljs-regexp">/x86_64-pc-linux-gnu/</span>libstdc++-v3<span class="hljs-regexp">/include/</span>bits/ostream_insert.h:<span class="hljs-number">101</span>
    #<span class="hljs-number">4</span> <span class="hljs-number">0</span>x5581bb9bc002 in std::basic_ostream&lt;<span class="hljs-keyword">char</span>, std::char_traits&lt;<span class="hljs-keyword">char</span>&gt; &gt;&amp; std::operator&lt;&lt; &lt;<span class="hljs-keyword">char</span>, std::char_traits&lt;<span class="hljs-keyword">char</span>&gt; &gt;(std::basic_ostream&lt;<span class="hljs-keyword">char</span>, std::char_traits&lt;<span class="hljs-keyword">char</span>&gt; &gt;&amp;, std::basic_stri
ng_view&lt;<span class="hljs-keyword">char</span>, std::char_traits&lt;<span class="hljs-keyword">char</span>&gt; &gt;) (<span class="hljs-regexp">/home/</span>jacko<span class="hljs-regexp">/cpp_rust_talk/</span><span class="hljs-number">1</span>.a.lifetimes/vector_push_fn+<span class="hljs-number">0</span>x3002)
    #<span class="hljs-number">5</span> <span class="hljs-number">0</span>x5581bb9bb6be in main (<span class="hljs-regexp">/home/</span>jacko<span class="hljs-regexp">/cpp_rust_talk/</span><span class="hljs-number">1</span>.a.lifetimes/vector_push_fn+<span class="hljs-number">0</span>x26be)
    #<span class="hljs-number">6</span> <span class="hljs-number">0</span>x7fcb0687bb24 in __libc_start_main (<span class="hljs-regexp">/usr/</span>lib/libc.so.<span class="hljs-number">6</span>+<span class="hljs-number">0</span>x27b24)
    #<span class="hljs-number">7</span> <span class="hljs-number">0</span>x5581bb9bb32d in _start (<span class="hljs-regexp">/home/</span>jacko<span class="hljs-regexp">/cpp_rust_talk/</span><span class="hljs-number">1</span>.a.lifetimes/vector_push_fn+<span class="hljs-number">0</span>x232d) </code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                </section>
                <section style="font-size: 1.2em; top: 476px; display: none;" hidden="" aria-hidden="true" class="future">
                            Rust
                            <pre class="rust" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">my_push_back</span></span>(v: &amp;<span class="hljs-keyword">mut</span> <span class="hljs-built_in">Vec</span>&lt;&amp;<span class="hljs-built_in">str</span>&gt;, s: &amp;<span class="hljs-built_in">str</span>) {
    v.push(s);
}

<span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">main</span></span>() {
    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> my_vector: <span class="hljs-built_in">Vec</span>&lt;&amp;<span class="hljs-built_in">str</span>&gt; = <span class="hljs-built_in">Vec</span>::new();
    {
        <span class="hljs-keyword">let</span> my_string = <span class="hljs-string">"hello world"</span>.to_string();
        my_push_back(&amp;<span class="hljs-keyword">mut</span> my_vector, &amp;my_string);
    }
    dbg!(my_vector);
}</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                            <pre style="width: 90%; position: relative;"><code data-trim="" class="hljs applescript"><span class="hljs-keyword">error</span>[E0623]: lifetime mismatch
 <span class="hljs-comment">--&gt; src/main.rs:2:12</span>
  |
<span class="hljs-number">1</span> | fn my_push_back(v: &amp;mut Vec&lt;&amp;str&gt;, s: &amp;str) {
  |                             <span class="hljs-comment">----      ---- these two types are declared with different lifetimes...</span>
<span class="hljs-number">2</span> |     v.push(s);
  |            ^ ...<span class="hljs-keyword">but</span> data <span class="hljs-keyword">from</span> `s` flows <span class="hljs-keyword">into</span> `v` here</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                </section>



                <section style="font-size: 1.2em; top: 476px; display: none;" hidden="" aria-hidden="true" class="future">
                    An invalid caller
                    <div class="container">
                        <div class="col">
                            Rust (previous)
                            <pre class="rust" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">my_push_back</span></span>(v: &amp;<span class="hljs-keyword">mut</span> <span class="hljs-built_in">Vec</span>&lt;&amp;<span class="hljs-built_in">str</span>&gt;, s: &amp;<span class="hljs-built_in">str</span>) {
    v.push(s);
}

<span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">main</span></span>() {
    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> my_vector: <span class="hljs-built_in">Vec</span>&lt;&amp;<span class="hljs-built_in">str</span>&gt; = <span class="hljs-built_in">Vec</span>::new();
    {
        <span class="hljs-keyword">let</span> my_string = <span class="hljs-string">"hello world"</span>.to_string();
        my_push_back(&amp;<span class="hljs-keyword">mut</span> my_vector, &amp;my_string);
    }
    dbg!(my_vector);
}</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                        </div>
                        <div class="col">
                            Rust (with explicit lifetimes)
                            <pre class="rust" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">my_push_back</span></span>&lt;<span class="hljs-symbol">'a</span>&gt;(v: &amp;<span class="hljs-keyword">mut</span> <span class="hljs-built_in">Vec</span>&lt;&amp;<span class="hljs-symbol">'a</span> <span class="hljs-built_in">str</span>&gt;, s: &amp;<span class="hljs-symbol">'a</span> <span class="hljs-built_in">str</span>) {
    v.push(s);
}

<span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">main</span></span>() {
    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> my_vector: <span class="hljs-built_in">Vec</span>&lt;&amp;<span class="hljs-built_in">str</span>&gt; = <span class="hljs-built_in">Vec</span>::new();
    {
        <span class="hljs-keyword">let</span> my_string = <span class="hljs-string">"hello world"</span>.to_string();
        my_push_back(&amp;<span class="hljs-keyword">mut</span> my_vector, &amp;my_string);
    }
    dbg!(my_vector);
}</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                        </div>
                    </div>
                </section>
                <section style="font-size: 1.2em; top: 476px; display: none;" hidden="" aria-hidden="true" class="future">
                            Rust (with explicit lifetimes)
                            <pre class="rust" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">my_push_back</span></span>&lt;<span class="hljs-symbol">'a</span>&gt;(v: &amp;<span class="hljs-keyword">mut</span> <span class="hljs-built_in">Vec</span>&lt;&amp;<span class="hljs-symbol">'a</span> <span class="hljs-built_in">str</span>&gt;, s: &amp;<span class="hljs-symbol">'a</span> <span class="hljs-built_in">str</span>) {
    v.push(s);
}

<span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">main</span></span>() {
    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> my_vector: <span class="hljs-built_in">Vec</span>&lt;&amp;<span class="hljs-built_in">str</span>&gt; = <span class="hljs-built_in">Vec</span>::new();
    {
        <span class="hljs-keyword">let</span> my_string = <span class="hljs-string">"hello world"</span>.to_string();
        my_push_back(&amp;<span class="hljs-keyword">mut</span> my_vector, &amp;my_string);
    }
    dbg!(my_vector);
}</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                            <pre style="width: 90%; position: relative;"><code data-trim="" class="hljs coq">error[E0597]: `my_string` does not live long <span class="hljs-built_in">enough</span>
  --&gt; src/main.rs:<span class="hljs-number">9</span>:<span class="hljs-number">38</span>
   |
<span class="hljs-type">9</span>  |         <span class="hljs-type">my_push_back</span>(&amp;mut my_vector, &amp;my_string);
   |                                      <span class="hljs-type">^^^^^^^^^^ borrowed</span> value does not live long <span class="hljs-built_in">enough</span>
<span class="hljs-number">10</span> |     <span class="hljs-type">}
   |     - `my_string</span>` dropped here while still borrowed
<span class="hljs-number">11</span> |     <span class="hljs-type">dbg</span>!(my_vector);
   |          <span class="hljs-type">--------- borrow</span> later used here</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                </section>




                <section data-markdown="" data-markdown-parsed="true" style="top: 476px; display: none;" hidden="" aria-hidden="true" class="future"><h1 id="big-idea-2">BIG IDEA #2</h1>
<p>Mutable references are unique. No mutable aliasing.</p>
</section>



                <section style="font-size: 2em; top: 476px; display: none;" hidden="" aria-hidden="true" class="future">
                    Mutable aliasing
                    <div class="container">
                        <div class="col">
                            C++
                            <pre class="cpp" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-keyword">int</span> my_int = <span class="hljs-number">5</span>;
<span class="hljs-keyword">int</span> &amp;reference1 = my_int;
<span class="hljs-keyword">int</span> &amp;reference2 = my_int;
reference1++;
reference2++;
assert(my_int == <span class="hljs-number">7</span>);</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                        </div>
                        <div class="col">
                            Rust
                            <pre class="rust" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> my_int = <span class="hljs-number">5</span>;
<span class="hljs-keyword">let</span> reference1 = &amp;<span class="hljs-keyword">mut</span> my_int;
<span class="hljs-keyword">let</span> reference2 = &amp;<span class="hljs-keyword">mut</span> my_int;
*reference1 += <span class="hljs-number">1</span>;
*reference2 += <span class="hljs-number">1</span>;
<span class="hljs-built_in">assert_eq!</span>(my_int, <span class="hljs-number">7</span>);</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                        </div>
                    </div>
                </section>
                <section style="font-size: 2em; top: 476px; display: none;" hidden="" aria-hidden="true" class="future">
                    Rust
                            <pre class="rust" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> my_int = <span class="hljs-number">5</span>;
<span class="hljs-keyword">let</span> reference1 = &amp;<span class="hljs-keyword">mut</span> my_int;
<span class="hljs-keyword">let</span> reference2 = &amp;<span class="hljs-keyword">mut</span> my_int;
*reference1 += <span class="hljs-number">1</span>;
*reference2 += <span class="hljs-number">1</span>;
<span class="hljs-built_in">assert_eq!</span>(my_int, <span class="hljs-number">7</span>);</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                            <pre style="position: relative;"><code data-trim="" class="hljs coq">error[E0499]: cannot borrow `my_int` <span class="hljs-built_in">as</span> mutable more than <span class="hljs-built_in">once</span> <span class="hljs-built_in">at</span> a <span class="hljs-built_in">time</span>
 --&gt; src/main.rs:<span class="hljs-number">4</span>:<span class="hljs-number">22</span>
  |
<span class="hljs-type">3</span> |     <span class="hljs-type">let</span> reference1 = &amp;mut my_int;
  |                      <span class="hljs-type">----------- first</span> mutable borrow occurs here
<span class="hljs-number">4</span> |     <span class="hljs-type">let</span> reference2 = &amp;mut my_int;
  |                      <span class="hljs-type">^^^^^^^^^^^ second</span> mutable borrow occurs here
<span class="hljs-number">5</span> |     <span class="hljs-type">*reference1</span> += <span class="hljs-number">1</span>;
  |     <span class="hljs-type">---------------- first</span> borrow later used here</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                </section>



                <section style="font-size: 1.75em; top: 476px; display: none;" hidden="" aria-hidden="true" class="future">
                    Multiple references into an array
                    <div class="container">
                        <div class="col">
                            C++
                            <pre class="cpp" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-built_in">array</span>&lt;<span class="hljs-keyword">char</span>, 2&gt; char_array = {<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>};
<span class="hljs-keyword">char</span> &amp;first_element = char_array[<span class="hljs-number">0</span>];
<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> &amp;second_element = char_array[<span class="hljs-number">1</span>];
first_element = second_element;
assert(char_array[<span class="hljs-number">0</span>] == <span class="hljs-string">'b'</span>);</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                        </div>
                        <div class="col">
                            Rust
                            <pre class="rust" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> char_array: [<span class="hljs-built_in">char</span>; <span class="hljs-number">2</span>] = [<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>];
<span class="hljs-keyword">let</span> first_element = &amp;<span class="hljs-keyword">mut</span> char_array[<span class="hljs-number">0</span>];
<span class="hljs-keyword">let</span> second_element = &amp;char_array[<span class="hljs-number">1</span>];
*first_element = *second_element;
<span class="hljs-built_in">assert_eq!</span>(char_array[<span class="hljs-number">0</span>], <span class="hljs-string">'b'</span>);</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                        </div>
                    </div>
                </section>
                <section style="font-size: 1.5em; top: 476px; display: none;" hidden="" aria-hidden="true" class="future">
                    Rust
                            <pre class="rust" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> char_array: [<span class="hljs-built_in">char</span>; <span class="hljs-number">2</span>] = [<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>];
<span class="hljs-keyword">let</span> first_element = &amp;<span class="hljs-keyword">mut</span> char_array[<span class="hljs-number">0</span>];
<span class="hljs-keyword">let</span> second_element = &amp;char_array[<span class="hljs-number">1</span>];
*first_element = *second_element;
<span class="hljs-built_in">assert_eq!</span>(char_array[<span class="hljs-number">0</span>], <span class="hljs-string">'b'</span>);</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                            <pre style="position: relative;"><code data-trim="" class="hljs coq">error[E0502]: cannot borrow `char_array[<span class="hljs-keyword">_</span>]` <span class="hljs-built_in">as</span> immutable because it is also borrowed <span class="hljs-built_in">as</span> mutable
 --&gt; src/main.rs:<span class="hljs-number">6</span>:<span class="hljs-number">26</span>
  |
<span class="hljs-type">5</span> |     <span class="hljs-type">let</span> first_element = &amp;mut char_array[<span class="hljs-number">0</span>];
  |                         <span class="hljs-type">------------------ mutable</span> borrow occurs here
<span class="hljs-number">6</span> |     <span class="hljs-type">let</span> second_element = &amp;char_array[<span class="hljs-number">1</span>];
  |                          <span class="hljs-type">^^^^^^^^^^^^^^ immutable</span> borrow occurs here
<span class="hljs-number">7</span> |     <span class="hljs-type">*first_element</span> = *second_element;
  |     <span class="hljs-type">-------------------------------- mutable</span> borrow later used here</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                </section>
                <section style="font-size: 1.5em; top: 476px; display: none;" hidden="" aria-hidden="true" class="future">
                    There's more than one way to do it
                    <br>
                    <br>
                    <div class="container">
                        <div class="col">
                            <div style="display: flex; flex-direction: column; height: 100%; justify-content: center; align-items: center">
                                <ul>
                                    <li>just use indexes</li>
                                    <li>pattern matching</li>
                                    <li><tt>split_at_mut</tt></li>
                                    <li><tt>iter_mut</tt></li>
                                    <li><tt>Cell&lt;char&gt;</tt></li>
                                    <li><tt>RefCell&lt;char&gt;</tt></li>
                                    <li><tt>unsafe</tt> code</li>
                                </ul>
                            </div>
                        </div>
                        <div class="col">
                            <tt>split_at_mut</tt>
                            <pre class="rust" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> char_array: [<span class="hljs-built_in">char</span>; <span class="hljs-number">2</span>] = [<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>];
<span class="hljs-keyword">let</span> (first_slice, rest_slice) =
    char_array.split_at_mut(<span class="hljs-number">1</span>);
<span class="hljs-keyword">let</span> first_element = &amp;<span class="hljs-keyword">mut</span> first_slice[<span class="hljs-number">0</span>];
<span class="hljs-keyword">let</span> second_element = &amp;rest_slice[<span class="hljs-number">0</span>];
*first_element = *second_element;
<span class="hljs-built_in">assert_eq!</span>(char_array[<span class="hljs-number">0</span>], <span class="hljs-string">'b'</span>);</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                            ☠ <tt>unsafe</tt> code ☠
                            <pre class="rust" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> char_array: [<span class="hljs-built_in">char</span>; <span class="hljs-number">2</span>] = [<span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>];
<span class="hljs-keyword">let</span> first_element: *<span class="hljs-keyword">mut</span> <span class="hljs-built_in">char</span> = &amp;<span class="hljs-keyword">mut</span> char_array[<span class="hljs-number">0</span>];
<span class="hljs-keyword">let</span> second_element: *<span class="hljs-keyword">const</span> <span class="hljs-built_in">char</span> = &amp;char_array[<span class="hljs-number">1</span>];
<span class="hljs-keyword">unsafe</span> {
    *first_element = *second_element;
}
<span class="hljs-built_in">assert_eq!</span>(char_array[<span class="hljs-number">0</span>], <span class="hljs-string">'b'</span>);</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                        </div>
                    </div>
                </section>



                <section style="font-size: 2em; top: 476px; display: none;" hidden="" aria-hidden="true" class="future">
                    Sidebar: mutable aliasing in assembly
                    <a href="https://godbolt.org/z/891s6z4Tb"><img src="./Firehose of Rust_files/godbolt_aliasing.png"></a>
                </section>





                <section style="font-size: 1.4em; top: 476px; display: none;" hidden="" aria-hidden="true" class="future">
                    Invalidating a reference by reallocating
                    <div class="container">
                        <div class="col">
                            C++
                            <pre class="cpp" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push_int_twice</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; &amp;v, <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> &amp;n)</span> </span>{
  v.push_back(n);
  v.push_back(n);
}

<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{
  <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; my_vector = {<span class="hljs-number">0</span>};
  <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> &amp;my_int_reference = my_vector[<span class="hljs-number">0</span>];
  push_int_twice(my_vector, my_int_reference);
}</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                        </div>
                        <div class="col">
                            Rust
                            <pre class="rust" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">push_int_twice</span></span>(v: &amp;<span class="hljs-keyword">mut</span> <span class="hljs-built_in">Vec</span>&lt;<span class="hljs-built_in">i32</span>&gt;, n: &amp;<span class="hljs-built_in">i32</span>) {
    v.push(*n);
    v.push(*n);
}

<span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">main</span></span>() {
    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> my_vector = <span class="hljs-built_in">vec!</span>[<span class="hljs-number">0</span>];
    <span class="hljs-keyword">let</span> my_int_reference = &amp;my_vector[<span class="hljs-number">0</span>];
    push_int_twice(&amp;<span class="hljs-keyword">mut</span> my_vector, my_int_reference);
}</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                        </div>
                    </div>
                </section>
                <section style="font-size: 1.4em; top: 476px; display: none;" hidden="" aria-hidden="true" class="future">
                            C++
                            <pre class="cpp" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push_int_twice</span><span class="hljs-params">(<span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; &amp;v, <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> &amp;n)</span> </span>{
  v.push_back(n);
  v.push_back(n);
}

<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>{
  <span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; my_vector = {<span class="hljs-number">0</span>};
  <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> &amp;my_int_reference = my_vector[<span class="hljs-number">0</span>];
  push_int_twice(my_vector, my_int_reference);
}</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                            <pre style="position: relative;"><code data-trim="" class="hljs angelscript">==<span class="hljs-number">42920</span>==ERROR: AddressSanitizer: heap-use-after-free on address <span class="hljs-number">0x602000000010</span> at pc <span class="hljs-number">0x5629133874f3</span> bp <span class="hljs-number">0x7ffe3befabe0</span> sp <span class="hljs-number">0x7ffe3befabd0</span>                                                       READ of size <span class="hljs-number">4</span> at <span class="hljs-number">0x602000000010</span> thread T0
    #<span class="hljs-number">0</span> <span class="hljs-number">0x5629133874f2</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">void</span> __gnu_cxx::new_allocator&lt;<span class="hljs-built_in">int</span>&gt;::construct&lt;<span class="hljs-built_in">int</span>, <span class="hljs-built_in">int</span> <span class="hljs-keyword">const</span>&amp;&gt;(<span class="hljs-built_in">int</span>*, <span class="hljs-built_in">int</span> <span class="hljs-keyword">const</span>&amp;) (/home/jacko/cpp_rust_talk/<span class="hljs-number">1.</span>b.mutability/vector_invalidate+<span class="hljs-number">0x24f2</span>)                      #<span class="hljs-number">1</span> <span class="hljs-number">0x56291338697c</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">void</span> std::allocator_traits&lt;std::allocator&lt;<span class="hljs-built_in">int</span>&gt; &gt;::construct&lt;<span class="hljs-built_in">int</span>, <span class="hljs-built_in">int</span> <span class="hljs-keyword">const</span>&amp;&gt;(std::allocator&lt;<span class="hljs-built_in">int</span>&gt;&amp;, <span class="hljs-built_in">int</span>*, <span class="hljs-built_in">int</span> <span class="hljs-keyword">const</span>&amp;) (/home/jacko/cpp_rust_talk/<span class="hljs-number">1.</span>b.mutability/vector_
invalidate+<span class="hljs-number">0x197c</span>)                                                                                                                                                                                 #<span class="hljs-number">2</span> <span class="hljs-number">0x562913386d9b</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">void</span> std::vector&lt;<span class="hljs-built_in">int</span>, std::allocator&lt;<span class="hljs-built_in">int</span>&gt; &gt;::_M_realloc_insert&lt;<span class="hljs-built_in">int</span> <span class="hljs-keyword">const</span>&amp;&gt;(__gnu_cxx::__normal_iterator&lt;<span class="hljs-built_in">int</span>*, std::vector&lt;<span class="hljs-built_in">int</span>, std::allocator&lt;<span class="hljs-built_in">int</span>&gt; &gt; &gt;, <span class="hljs-built_in">int</span> <span class="hljs-keyword">const</span>&amp;) (/
home/jacko/cpp_rust_talk/<span class="hljs-number">1.</span>b.mutability/vector_invalidate+<span class="hljs-number">0x1d9b</span>)                                                                                                                                  #<span class="hljs-number">3</span> <span class="hljs-number">0x562913386672</span> <span class="hljs-keyword">in</span> std::vector&lt;<span class="hljs-built_in">int</span>, std::allocator&lt;<span class="hljs-built_in">int</span>&gt; &gt;::push_back(<span class="hljs-built_in">int</span> <span class="hljs-keyword">const</span>&amp;) (/home/jacko/cpp_rust_talk/<span class="hljs-number">1.</span>b.mutability/vector_invalidate+<span class="hljs-number">0x1672</span>)
    #<span class="hljs-number">4</span> <span class="hljs-number">0x5629133862be</span> <span class="hljs-keyword">in</span> push_int_twice(std::vector&lt;<span class="hljs-built_in">int</span>, std::allocator&lt;<span class="hljs-built_in">int</span>&gt; &gt;&amp;, <span class="hljs-built_in">int</span> <span class="hljs-keyword">const</span>&amp;) (/home/jacko/cpp_rust_talk/<span class="hljs-number">1.</span>b.mutability/vector_invalidate+<span class="hljs-number">0x12be</span>)                                   #<span class="hljs-number">5</span> <span class="hljs-number">0x562913386452</span> <span class="hljs-keyword">in</span> main (/home/jacko/cpp_rust_talk/<span class="hljs-number">1.</span>b.mutability/vector_invalidate+<span class="hljs-number">0x1452</span>)
    #<span class="hljs-number">6</span> <span class="hljs-number">0x7f1db0fa8b24</span> <span class="hljs-keyword">in</span> __libc_start_main (/usr/lib/libc.so<span class="hljs-number">.6</span>+<span class="hljs-number">0x27b24</span>)                                                                                                                            #<span class="hljs-number">7</span> <span class="hljs-number">0x5629133861bd</span> <span class="hljs-keyword">in</span> _start (/home/jacko/cpp_rust_talk/<span class="hljs-number">1.</span>b.mutability/vector_invalidate+<span class="hljs-number">0x11bd</span>)</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                </section>
                <section style="font-size: 1.4em; top: 476px; display: none;" hidden="" aria-hidden="true" class="future">
                            Rust
                            <pre class="rust" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">push_int_twice</span></span>(v: &amp;<span class="hljs-keyword">mut</span> <span class="hljs-built_in">Vec</span>&lt;<span class="hljs-built_in">i32</span>&gt;, n: &amp;<span class="hljs-built_in">i32</span>) {
    v.push(*n);
    v.push(*n);
}

<span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">main</span></span>() {
    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> my_vector = <span class="hljs-built_in">vec!</span>[<span class="hljs-number">0</span>];
    <span class="hljs-keyword">let</span> my_int_reference = &amp;my_vector[<span class="hljs-number">0</span>];
    push_int_twice(&amp;<span class="hljs-keyword">mut</span> my_vector, my_int_reference);
}</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                            <pre style="width: 90%; position: relative;"><code data-trim="" class="hljs coq">error[E0502]: cannot borrow `my_vector` <span class="hljs-built_in">as</span> mutable because it is also borrowed <span class="hljs-built_in">as</span> immutable
  --&gt; src/main.rs:<span class="hljs-number">12</span>:<span class="hljs-number">20</span>
   |
<span class="hljs-type">11</span> |     <span class="hljs-type">let</span> my_int_reference = &amp;my_vector[<span class="hljs-number">0</span>];
   |                             <span class="hljs-type">--------- immutable</span> borrow occurs here
<span class="hljs-number">12</span> |     <span class="hljs-type">push_int_twice</span>(&amp;mut my_vector, my_int_reference);
   |                    <span class="hljs-type">^^^^^^^^^^^^^^  ---------------- immutable</span> borrow later used here
   |                    <span class="hljs-type">|
   |                    mutable</span> borrow occurs here</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                </section>





                <section style="font-size: 1.5em; top: 476px; display: none;" hidden="" aria-hidden="true" class="future">
                    <p>Herb Sutter's aliased <tt>shared_ptr</tt> pitfall</p>

                    <a href="https://youtu.be/xnqTKD8uD64?t=1380"><img src="./Firehose of Rust_files/sutter_guideline.png" width="80%"></a>
                </section>





                <section style="font-size: 1em; top: 476px; display: none;" hidden="" aria-hidden="true" class="future">
                    Magical multithreading
                    <div class="container">
                        <div class="col">
                            <p>C++</p>
                            <p><tt>for</tt> loop</p>
                            <pre class="cpp" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v = vector_of_ints();
<span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;x : v) {
  x++;
}</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                            <p>serial <tt>for_each</tt></p>
                            <pre class="cpp" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v = vector_of_ints();
for_each(v.begin(), v.end(), [](<span class="hljs-keyword">int</span> &amp;x) {
  x++;
});</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                            <p>C++17 parallel <tt>for_each</tt></p>
                            <pre class="cpp" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v = vector_of_ints();
for_each(execution::par, v.begin(), v.end(), [](<span class="hljs-keyword">int</span> &amp;x) {
  x++;
});</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                        </div>
                        <div class="col">
                            <p>Rust</p>
                            <p><tt>for</tt> loop</p>
                            <pre class="rust" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> v: <span class="hljs-built_in">Vec</span>&lt;<span class="hljs-built_in">i32</span>&gt; = vector_of_ints();
<span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> &amp;<span class="hljs-keyword">mut</span> v {
    *x += <span class="hljs-number">1</span>;
}</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                            <p>serial <tt>for_each</tt></p>
                            <pre class="rust" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> v: <span class="hljs-built_in">Vec</span>&lt;<span class="hljs-built_in">i32</span>&gt; = vector_of_ints();
v.iter_mut().for_each(|x| {
    *x += <span class="hljs-number">1</span>;
});</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                            <p>Rayon parallel <tt>for_each</tt></p>
                            <pre class="rust" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> v: <span class="hljs-built_in">Vec</span>&lt;<span class="hljs-built_in">i32</span>&gt; = vector_of_ints();
v.par_iter_mut().for_each(|x| {
    *x += <span class="hljs-number">1</span>;
});</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                        </div>
                    </div>
                </section>





                <section style="top: 476px; display: none;" hidden="" aria-hidden="true" class="future">
                    Tragical multithreading
                    <div class="container">
                        <div class="col">
                            <p>C++</p>
                            <p><tt>for</tt> loop</p>
                            <pre class="cpp" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v = vector_of_ints();
<span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;
<span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;x : v) {
  x++;
  sum += x;
}</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                            <p>serial <tt>for_each</tt></p>
                            <pre class="cpp" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v = vector_of_ints();
<span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;
for_each(v.begin(), v.end(), [&amp;](<span class="hljs-keyword">int</span> &amp;x) {
  x++;
  sum += x;
});</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                            <p>C++17 parallel <tt>for_each</tt></p>
                            <pre class="cpp" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v = vector_of_ints();
<span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;
for_each(execution::par, v.begin(), v.end(), [&amp;](<span class="hljs-keyword">int</span> &amp;x) {
  x++;
  sum += x;
});</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                        </div>
                        <div class="col">
                            <p>Rust</p>
                            <p><tt>for</tt> loop</p>
                            <pre class="rust" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> v: <span class="hljs-built_in">Vec</span>&lt;<span class="hljs-built_in">i32</span>&gt; = vector_of_ints();
<span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> sum = <span class="hljs-number">0</span>;
<span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> &amp;<span class="hljs-keyword">mut</span> v {
    *x += <span class="hljs-number">1</span>;
    sum += *x;
}</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                            <p>serial <tt>for_each</tt></p>
                            <pre class="rust" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> v: <span class="hljs-built_in">Vec</span>&lt;<span class="hljs-built_in">i32</span>&gt; = vector_of_ints();
<span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> sum = <span class="hljs-number">0</span>;
v.iter_mut().for_each(|x| {
    *x += <span class="hljs-number">1</span>;
    sum += *x;
});</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                            <p>Rayon parallel <tt>for_each</tt></p>
                            <pre class="rust" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> v: <span class="hljs-built_in">Vec</span>&lt;<span class="hljs-built_in">i32</span>&gt; = vector_of_ints();
<span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> sum = <span class="hljs-number">0</span>;
v.par_iter_mut().for_each(|x| {
    *x += <span class="hljs-number">1</span>;
    sum += *x;
});</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                        </div>
                    </div>
                </section>
                <section style="font-size: 1.5em; top: 476px; display: none;" hidden="" aria-hidden="true" class="future">
                    Rayon parallel <tt>for_each</tt>
                            <pre class="rust" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> v: <span class="hljs-built_in">Vec</span>&lt;<span class="hljs-built_in">i32</span>&gt; = vector_of_ints();
<span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> sum = <span class="hljs-number">0</span>;
v.par_iter_mut().for_each(|x| {
    *x += <span class="hljs-number">1</span>;
    sum += *x;
});</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                            <pre style="width: 90%; position: relative;"><code data-trim="" class="hljs xquery">  <span class="hljs-built_in"> error</span>[E0594]: cannot assign <span class="hljs-keyword">to</span> <span class="hljs-built_in">`sum</span>`, <span class="hljs-keyword">as</span> it <span class="hljs-literal">is</span> a captured <span class="hljs-keyword">variable</span> <span class="hljs-keyword">in</span> a `Fn` closure
  --&gt; src/main.rs:<span class="hljs-number">62</span>:<span class="hljs-number">9</span>
   |
<span class="hljs-number">62</span> |        <span class="hljs-built_in"> sum</span> += *x;
   |         ^^^^^^^^^ cannot assign</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                </section>




                <section style="font-size: 1.9em; top: 476px; display: none;" hidden="" aria-hidden="true" class="future">
                    How does Rust know?
                    <div class="container">
                        <div class="col">
                            <tt>Iterator</tt>
                            <pre class="rust" style="position: relative;"><code data-trim="" data-line-numbers="" class="hljs"><table class="hljs-ln"><tbody><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">for_each</span></span>&lt;F&gt;(<span class="hljs-keyword">self</span>, f: F)</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">where</span></div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">Self</span>: <span class="hljs-built_in">Sized</span>,</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    F: <span class="hljs-built_in">FnMut</span>(Self::Item),</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">{</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-meta">#[inline]</span></div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">call</span></span>&lt;T&gt;(</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">mut</span> f: <span class="hljs-keyword">impl</span> <span class="hljs-built_in">FnMut</span>(T),</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    ) -&gt; <span class="hljs-keyword">impl</span> <span class="hljs-built_in">FnMut</span>((), T) {</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">move</span> |(), item| f(item)</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    }</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">self</span>.fold((), call(f));</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">}</div></td></tr></tbody></table></code><code data-trim="" data-line-numbers="4" class="hljs fragment has-highlights" data-fragment-index="0"><table class="hljs-ln"><tbody><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">for_each</span></span>&lt;F&gt;(<span class="hljs-keyword">self</span>, f: F)</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">where</span></div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">Self</span>: <span class="hljs-built_in">Sized</span>,</div></td></tr><tr class="highlight-line"><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    F: <span class="hljs-built_in">FnMut</span>(Self::Item),</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">{</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-meta">#[inline]</span></div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">call</span></span>&lt;T&gt;(</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">mut</span> f: <span class="hljs-keyword">impl</span> <span class="hljs-built_in">FnMut</span>(T),</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    ) -&gt; <span class="hljs-keyword">impl</span> <span class="hljs-built_in">FnMut</span>((), T) {</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">move</span> |(), item| f(item)</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    }</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">self</span>.fold((), call(f));</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">}</div></td></tr></tbody></table></code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                        </div>
                        <div class="col">
                            <tt>ParallelIterator</tt>
                            <pre class="rust" style="position: relative;"><code data-trim="" data-line-numbers="" class="hljs"><table class="hljs-ln"><tbody><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">for_each</span></span>&lt;OP&gt;(<span class="hljs-keyword">self</span>, op: OP)</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">where</span></div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    OP: <span class="hljs-built_in">Fn</span>(Self::Item) + <span class="hljs-built_in">Sync</span> + <span class="hljs-built_in">Send</span>,</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">{</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    for_each::for_each(<span class="hljs-keyword">self</span>, &amp;op)</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">}</div></td></tr></tbody></table></code><code data-trim="" data-line-numbers="3" class="hljs fragment has-highlights" data-fragment-index="1"><table class="hljs-ln"><tbody><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">for_each</span></span>&lt;OP&gt;(<span class="hljs-keyword">self</span>, op: OP)</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">where</span></div></td></tr><tr class="highlight-line"><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    OP: <span class="hljs-built_in">Fn</span>(Self::Item) + <span class="hljs-built_in">Sync</span> + <span class="hljs-built_in">Send</span>,</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">{</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    for_each::for_each(<span class="hljs-keyword">self</span>, &amp;op)</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">}</div></td></tr></tbody></table></code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                        </div>
                    </div>
                </section>





                <section style="font-size: 1.3em; top: 476px; display: none;" hidden="" aria-hidden="true" class="future">
                    Synchronizing shared state
                    <div class="container">
                        <div class="col">
                            <p>C++</p>
                            <p><tt>atomic&lt;int&gt;</tt></p>
                            <pre class="cpp" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v = vector_of_ints();
atomic&lt;<span class="hljs-keyword">int</span>&gt; sum = <span class="hljs-number">0</span>;
for_each(execution::par, v.begin(), v.end(), [&amp;](<span class="hljs-keyword">int</span> &amp;x) {
  x += <span class="hljs-number">1</span>;
  sum.fetch_add(x, memory_order_relaxed);
});</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                            <p><tt>mutex</tt></p>
                            <pre class="cpp" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-built_in">vector</span>&lt;<span class="hljs-keyword">int</span>&gt; v = vector_of_ints();
<span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;
mutex sum_lock;
for_each(execution::par, v.begin(), v.end(), [&amp;](<span class="hljs-keyword">int</span> &amp;x) {
  x += <span class="hljs-number">1</span>;
  lock_guard&lt;mutex&gt; guard(sum_lock);
  sum += x;
});</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                        </div>
                        <div class="col">
                            <p>Rust</p>
                            <p><tt>AtomicI32</tt></p>
                            <pre class="rust" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> v: <span class="hljs-built_in">Vec</span>&lt;<span class="hljs-built_in">i32</span>&gt; = vector_of_ints();
<span class="hljs-keyword">let</span> sum: AtomicI32 = AtomicI32::new(<span class="hljs-number">0</span>);
v.par_iter_mut().for_each(|x| {
    *x += <span class="hljs-number">1</span>;
    sum.fetch_add(*x, Ordering::Relaxed);
});</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                            <p><tt>Mutex&lt;i32&gt;</tt></p>
                            <pre class="rust" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> v: <span class="hljs-built_in">Vec</span>&lt;<span class="hljs-built_in">i32</span>&gt; = vector_of_ints();
<span class="hljs-keyword">let</span> sum: Mutex&lt;<span class="hljs-built_in">i32</span>&gt; = Mutex::new(<span class="hljs-number">0</span>);
v.par_iter_mut().for_each(|x| {
    *x += <span class="hljs-number">1</span>;
    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> guard: MutexGuard&lt;<span class="hljs-built_in">i32</span>&gt; = sum.lock().unwrap();
    *guard += *x;
});</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                        </div>
                    </div>
                </section>






                <section data-markdown="" data-markdown-parsed="true" style="top: 476px; display: none;" hidden="" aria-hidden="true" class="future"><h1 id="move-semantics">Move Semantics</h1>
<p>"Plain old data" types like <tt>i32</tt> and <tt>&amp;T</tt> are <tt>Copy</tt>.</p>
<p>

</p><div class="wrap">
    By-value operations (like assignment, parameter passing,<br>
    and returning) on <tt>Copy</tt> types are bitwise copies, like in C.
</div>

<p>Other types like <tt>Vec&lt;i32&gt;</tt> and <tt>&amp;mut T</tt> are non-<tt>Copy</tt>.</p>
<p>

</p><h2 id="big-idea-3">BIG IDEA #3</h2>
<p>

</p><div class="wrap">
    By-value operations on non-<tt>Copy</tt> types are moves. Moves<br>
    are <u>destructive bitwise copies</u>, and everything is movable.
</div>
</section>





                <section style="font-size: 1.5em; top: 476px; display: none;" hidden="" aria-hidden="true" class="future">
                    Moving a string
                    <div class="container">
                        <div class="col">
                            C++
                            <pre class="cpp" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-built_in">string</span> s1 = <span class="hljs-string">"abcdefghijklmnopqrstuvwxyz"</span>;
<span class="hljs-built_in">string</span> s2 = move(s1);
<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt; v;
v.push_back(move(s2));</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                            one string allocation<br>
                            <u>three</u> string destructors
                        </div>
                        <div class="col">
                            Rust
                            <pre class="rust" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-keyword">let</span> s1 = <span class="hljs-string">"abcdefghijklmnopqrstuvwxyz"</span>.to_string();
<span class="hljs-keyword">let</span> s2 = s1;
<span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> v = <span class="hljs-built_in">Vec</span>::new();
v.push(s2);</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                            one string allocation<br>
                            <u>one</u> string destructor
                        </div>
                    </div>
                </section>





                <section style="font-size: 1.5em; top: 476px; display: none;" hidden="" aria-hidden="true" class="future">
                    Copying a string
                    <div class="container">
                        <div class="col">
                            C++
                            <pre class="cpp" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-built_in">string</span> s1 = <span class="hljs-string">"abcdefghijklmnopqrstuvwxyz"</span>;
<span class="hljs-built_in">string</span> s2 = s1;
<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt; v;
v.push_back(s2);</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                            three string allocations<br>
                            three string destructors
                        </div>
                        <div class="col">
                            Rust
                            <pre class="rust" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-keyword">let</span> s1 = <span class="hljs-string">"abcdefghijklmnopqrstuvwxyz"</span>.to_string();
<span class="hljs-keyword">let</span> s2 = s1.clone();
<span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> v = <span class="hljs-built_in">Vec</span>::new();
v.push(s2.clone());</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                            three string allocations<br>
                            three string destructors
                        </div>
                    </div>
                </section>





                <section style="font-size: 1.5em; top: 476px; display: none;" hidden="" aria-hidden="true" class="future">
                    Accessing a moved-from object
                    <div class="container">
                        <div class="col">
                            C++
                            <pre class="cpp" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-built_in">string</span> s1 = <span class="hljs-string">"abcdefghijklmnopqrstuvwxyz"</span>;
<span class="hljs-built_in">string</span> s2 = move(s1);
<span class="hljs-built_in">cout</span> &lt;&lt; s1;</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                            on my box:<br>
                            <tt>s1 == ""</tt>
                        </div>
                        <div class="col">
                            Rust
                            <pre class="rust" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-keyword">let</span> s1 = <span class="hljs-string">"abcdefghijklmnopqrstuvwxyz"</span>.to_string();
<span class="hljs-keyword">let</span> s2 = s1;
dbg!(s1);</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                        </div>
                    </div>
                </section>
                <section style="font-size: 1.5em; top: 476px; display: none;" hidden="" aria-hidden="true" class="future">
                    Rust
                            <pre class="rust" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-keyword">let</span> s1 = <span class="hljs-string">"abcdefghijklmnopqrstuvwxyz"</span>.to_string();
<span class="hljs-keyword">let</span> s2 = s1;
dbg!(s1);</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                            <pre style="width: 90%; position: relative;"><code data-trim="" class="hljs routeros"><span class="hljs-builtin-name">error</span>[E0382]: use of moved value: `s1`
  --&gt; src/main.rs:26:14
   |
24 |         let s1 = <span class="hljs-string">"abcdefghijklmnopqrstuvwxyz"</span>.to_string();
   |             -- move occurs because `s1` has<span class="hljs-built_in"> type </span>`String`, which does <span class="hljs-keyword">not</span> implement the `Copy` trait
25 |         let s2 = s1;
   |                  -- value moved here
26 |         dbg!(s1);
   |              ^^ value used here after move</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                </section>





                <section style="font-size: 1.5em; top: 476px; display: none;" hidden="" aria-hidden="true" class="future">
                    Moving a borrowed object
                    <div class="container">
                        <div class="col">
                            C++
                            <pre class="cpp" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-built_in">string</span> s1 = <span class="hljs-string">"abcde"</span>;
string_view my_view = s1;
<span class="hljs-built_in">string</span> s2 = move(s1);
<span class="hljs-built_in">cout</span> &lt;&lt; my_view;</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                            on my box:<br>
                            <tt>my_view == "\0bcde"</tt>
                        </div>
                        <div class="col">
                            Rust
                            <pre class="rust" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-keyword">let</span> s1 = <span class="hljs-string">"abcde"</span>.to_string();
<span class="hljs-keyword">let</span> my_view = s1.as_str();
<span class="hljs-keyword">let</span> s2 = s1;
dbg!(my_view);</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                        </div>
                    </div>
                </section>
                <section style="font-size: 1.5em; top: 476px; display: none;" hidden="" aria-hidden="true" class="future">
                    Rust
                            <pre class="rust" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-keyword">let</span> s1 = <span class="hljs-string">"abcde"</span>.to_string();
<span class="hljs-keyword">let</span> my_view = s1.as_str();
<span class="hljs-keyword">let</span> s2 = s1;
dbg!(my_view);</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                            <pre style="width: 90%; position: relative;"><code data-trim="" class="hljs coq">error[E0505]: cannot <span class="hljs-built_in">move</span> out of `s1` because it is borrowed
  --&gt; src/main.rs:<span class="hljs-number">31</span>:<span class="hljs-number">18</span>
   |
<span class="hljs-type">30</span> |         <span class="hljs-type">let</span> my_view = s1.as_str();
   |                       <span class="hljs-type">-- borrow</span> of `s1` occurs here
<span class="hljs-number">31</span> |         <span class="hljs-type">let</span> s2 = s1;
   |                  <span class="hljs-type">^^ move</span> out of `s1` occurs here
<span class="hljs-number">32</span> |         <span class="hljs-type">dbg</span>!(my_view);
   |              <span class="hljs-type">------- borrow</span> later used here</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                </section>





                <section style="font-size: 1.5em; top: 476px; display: none;" hidden="" aria-hidden="true" class="future">
                    Moving a string again
                    <div class="container">
                        <div class="col">
                            C++
                            <pre class="cpp" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-built_in">string</span> s1 = <span class="hljs-string">"abcdefghijklmnopqrstuvwxyz"</span>;
<span class="hljs-built_in">string</span> s2 = move(s1);
<span class="hljs-built_in">vector</span>&lt;<span class="hljs-built_in">string</span>&gt; v;
v.push_back(move(s2));
<span class="hljs-built_in">string</span> s3 = move(v[<span class="hljs-number">0</span>]);</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                        </div>
                        <div class="col">
                            Rust
                            <pre class="rust" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-keyword">let</span> s1 = <span class="hljs-string">"abcdefghijklmnopqrstuvwxyz"</span>.to_string();
<span class="hljs-keyword">let</span> s2 = s1;
<span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> v = <span class="hljs-built_in">Vec</span>::new();
v.push(s2);
<span class="hljs-keyword">let</span> s3 = v[<span class="hljs-number">0</span>];</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                        </div>
                    </div>
                </section>
                <section style="font-size: 1.5em; top: 476px; display: none;" hidden="" aria-hidden="true" class="future">
                    Rust
                            <pre class="rust" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-keyword">let</span> s1 = <span class="hljs-string">"abcdefghijklmnopqrstuvwxyz"</span>.to_string();
<span class="hljs-keyword">let</span> s2 = s1;
<span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> v = <span class="hljs-built_in">Vec</span>::new();
v.push(s2);
<span class="hljs-keyword">let</span> s3 = v[<span class="hljs-number">0</span>];</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                            <pre style="width: 90%; position: relative;"><code data-trim="" class="hljs routeros"><span class="hljs-builtin-name">error</span>[E0507]: cannot move out of index of `Vec&lt;String&gt;`
  --&gt; src/main.rs:86:18
   |
86 |         let s3 = v[0];
   |                  ^^^^
   |                  |
   |                  move occurs because value has<span class="hljs-built_in"> type </span>`String`, which does <span class="hljs-keyword">not</span> implement the `Copy` trait
   |                  help: consider borrowing here: `&amp;v[0]`</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                </section>





                <section style="font-size: 1.75em; top: 476px; display: none;" hidden="" aria-hidden="true" class="future">
                    Moving through a reference
                    <div class="container">
                        <div class="col">
                            C++
                            <pre class="cpp" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">f</span><span class="hljs-params">(<span class="hljs-built_in">string</span> &amp;s1)</span> </span>{
  <span class="hljs-built_in">string</span> s2 = move(s1);
  <span class="hljs-built_in">cout</span> &lt;&lt; s2;
}

<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">g</span><span class="hljs-params">()</span> </span>{
  <span class="hljs-built_in">string</span> s1 = <span class="hljs-string">"foo"</span>;
  f(s1);
  <span class="hljs-built_in">cout</span> &lt;&lt; s1;
}</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                            on my box:<br>
                            <tt>s1 == ""</tt><br>
                            <tt>s2 == "foo"</tt>
                        </div>
                        <div class="col">
                            Rust
                            <pre class="rust" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">f</span></span>(s1: &amp;<span class="hljs-keyword">mut</span> <span class="hljs-built_in">String</span>) {
    <span class="hljs-keyword">let</span> s2 = *s1;
    dbg!(s2);
}

<span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">g</span></span>() {
    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> s1 = <span class="hljs-string">"foo"</span>.to_string();
    f(&amp;<span class="hljs-keyword">mut</span> s1);
    dbg!(s1);
}</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                        </div>
                    </div>
                </section>
                <section style="font-size: 1.5em; top: 476px; display: none;" hidden="" aria-hidden="true" class="future">
                    Rust
                            <pre class="rust" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">f</span></span>(s1: &amp;<span class="hljs-keyword">mut</span> <span class="hljs-built_in">String</span>) {
    <span class="hljs-keyword">let</span> s2 = *s1;
    dbg!(s2);
}

<span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">g</span></span>() {
    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> s1 = <span class="hljs-string">"foo"</span>.to_string();
    f(&amp;<span class="hljs-keyword">mut</span> s1);
    dbg!(s1);
}</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                            <pre style="width: 90%; position: relative;"><code data-trim="" class="hljs routeros"><span class="hljs-builtin-name">error</span>[E0507]: cannot move out of `*s1` which is behind a mutable reference
 --&gt; src/main.rs:7:14
  |
7 |     let s2 = *s1;
  |              ^^^
  |              |
  |              move occurs because `*s1` has<span class="hljs-built_in"> type </span>`String`, which does <span class="hljs-keyword">not</span> implement the `Copy` trait
  |              help: consider borrowing here: `&amp;*s1`</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                </section>





                <section style="font-size: 1.4em; top: 476px; display: none;" hidden="" aria-hidden="true" class="future">
                    There's more than one way to do it
                    <div class="container">
                        <div class="col">
                            <tt>mem::swap</tt>
                            <pre class="rust" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">f</span></span>(s1: &amp;<span class="hljs-keyword">mut</span> <span class="hljs-built_in">String</span>) {
    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> s2 = <span class="hljs-string">""</span>.to_string();
    mem::swap(s1, &amp;<span class="hljs-keyword">mut</span> s2);
    dbg!(s2);
}

<span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">g</span></span>() {
    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> s1 = <span class="hljs-string">"foo"</span>.to_string();
    f(&amp;<span class="hljs-keyword">mut</span> s1);
    dbg!(s1);
}</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                            <tt>s1 == ""</tt><br>
                            <tt>s2 == "foo"</tt><br>
                        </div>
                        <div class="col">
                            <tt>Option::take</tt>
                            <pre class="rust" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">f</span></span>(s1: &amp;<span class="hljs-keyword">mut</span> <span class="hljs-built_in">Option</span>&lt;<span class="hljs-built_in">String</span>&gt;) {
    <span class="hljs-keyword">let</span> s2 = s1.take().unwrap();
    dbg!(s2);
}

<span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">g</span></span>() {
    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> s1: <span class="hljs-built_in">Option</span>&lt;<span class="hljs-built_in">String</span>&gt; =
        <span class="hljs-literal">Some</span>(<span class="hljs-string">"foo"</span>.to_string());
    f(&amp;<span class="hljs-keyword">mut</span> s1);
    dbg!(s1);
}</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                            <tt>s1 == None</tt><br>
                            <tt>s2 == "foo"</tt><br>
                        </div>
                        <div class="col">
                            <tt>Vec::remove</tt>
                            <pre class="rust" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">f</span></span>(v: &amp;<span class="hljs-keyword">mut</span> <span class="hljs-built_in">Vec</span>&lt;<span class="hljs-built_in">String</span>&gt;) {
    <span class="hljs-keyword">let</span> s2 = v.remove(<span class="hljs-number">0</span>);
    dbg!(s2);
}

<span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">g</span></span>() {
    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> v = <span class="hljs-built_in">vec!</span>[
        <span class="hljs-string">"foo"</span>.to_string(),
        <span class="hljs-string">"bar"</span>.to_string(),
        <span class="hljs-string">"baz"</span>.to_string(),
    ];
    f(&amp;<span class="hljs-keyword">mut</span> v);
    dbg!(v);
}</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                            <tt>v == ["bar", "baz"]</tt><br>
                            <tt>s2 == "foo"</tt><br>
                        </div>
                    </div>
                </section>





                <section style="font-size: 2em; top: 476px; display: none;" hidden="" aria-hidden="true" class="future">
                    The <tt>drop</tt> function
                    <div class="container">
                        <div class="col">
                            C++
                            <pre class="cpp" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-function">fstream <span class="hljs-title">file</span><span class="hljs-params">(<span class="hljs-string">"/dev/null"</span>)</span></span>;
file.close();</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                        </div>
                        <div class="col">
                            Rust
                            <pre class="rust" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-keyword">let</span> file = File::open(<span class="hljs-string">"/dev/null"</span>)?;
<span class="hljs-built_in">drop</span>(file);</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                        </div>
                    </div>
                </section>





                <section style="font-size: 2em; top: 476px; display: none;" hidden="" aria-hidden="true" class="future">
                    Surprise: <tt>drop</tt> is the empty function
                    <br>
                    <br>
                            <pre class="rust" style="width: 50%; font-size: 0.9em; position: relative;"><code data-trim="" class="hljs"><span class="hljs-keyword">pub</span> <span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">drop</span></span>&lt;T&gt;(_x: T) {}</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                </section>




                <section id="tradeoffs-slide" style="font-size: 1em; top: 476px; display: none;" hidden="" aria-hidden="true" class="future">
<style>
#tradeoffs-slide li {
    margin: 1em;
}
</style>
                    <h2>Move Semantics Tradeoffs</h2>
                    <div class="container">
                        <div class="col">
                            <h3>C++ strengths</h3>
<ul>
    <li><strong>Immovable types are supported.</strong></li>
    <ul>
        <li><tt>mutex</tt> in C++ doesn't require heap allocation. <tt>Mutex</tt> in Rust does, to make itself movable on Unix.</li>
    </ul>
    <li><strong>Complex moves are supported.</strong></li>
    <ul>
        <li>GCC <tt>string</tt> has a branch-free small string optimization. This isn't possible in Rust, because it's not bitwise movable.</li>
    </ul>
</ul>
                            
                        </div>
                        <div class="col">
                            <h3>Rust strengths</h3>
<ul>
    <li><strong>All types are movable, and moves are infallible.</strong></li>
    <ul>
        <li>Constructors are regular functions; <tt>new</tt> isn't a keyword.</li>
        <li><tt>Vec</tt> growing and shifting can always <tt>memmove</tt>.</li>
    </ul>
    <li><strong>Types don't need a moved-from state.</strong></li>
    <ul>
        <li><tt>unique_ptr&lt;T&gt;</tt> in C++ has to be nullable to be movable, but <tt>Box&lt;T&gt;</tt> in Rust doesn't.</li>
    </ul>
</ul>
                        </div>
                    </div>
                </section>






                <section style="font-size: 2em; top: 476px; display: none;" hidden="" aria-hidden="true" class="future">
                    Sidebar: <tt>memmove</tt> in <tt>Vec::remove</tt>
                    <a href="https://godbolt.org/z/fK1WchMYf"><img src="./Firehose of Rust_files/godbolt_erase.png"></a>
                </section>





                <section style="top: 476px; display: none;" hidden="" aria-hidden="true" class="future">
                    <h1>Putting it all together</h1>
                    <tt style="font-size: 2em">Arc&lt;Mutex&lt;String&gt;&gt;</tt>
                </section>




                <section style="font-size: 1.3em; top: 476px; display: none;" hidden="" aria-hidden="true" class="future">
                    A mutex on the stack
                    <div class="container">
                        <div class="col">
                            C++
                            <pre class="cpp" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-built_in">string</span> my_string;
mutex my_mutex;
<span class="hljs-built_in">vector</span>&lt;thread&gt; thread_handles;
<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) {
  <span class="hljs-function">thread <span class="hljs-title">thread_handle</span><span class="hljs-params">([&amp;] {
    lock_guard&lt;mutex&gt; guard(my_mutex);
    my_string += <span class="hljs-string">"some characters"</span>;
  })</span></span>;
  thread_handles.push_back(move(thread_handle));
}
<span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;thread_handle : thread_handles) {
  thread_handle.join();
}</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                        </div>
                        <div class="col">
                            Rust
                            <pre class="rust" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-keyword">let</span> my_string: Mutex&lt;<span class="hljs-built_in">String</span>&gt; = Mutex::new(<span class="hljs-built_in">String</span>::new());
<span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> thread_handles = <span class="hljs-built_in">Vec</span>::new();
<span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>..<span class="hljs-number">10</span> {
    <span class="hljs-keyword">let</span> thread_handle = thread::spawn(|| {
        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> guard: MutexGuard&lt;<span class="hljs-built_in">String</span>&gt; =
            my_string.lock().unwrap();
        guard.push_str(<span class="hljs-string">"some characters"</span>);
    });
    thread_handles.push(thread_handle);
}
<span class="hljs-keyword">for</span> thread_handle <span class="hljs-keyword">in</span> thread_handles {
    thread_handle.join().unwrap();
}</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                        </div>
                    </div>
                </section>
                <section style="font-size: 1.3em; top: 476px; display: none;" hidden="" aria-hidden="true" class="future">
                    Rust
                            <pre class="rust" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-keyword">let</span> my_string: Mutex&lt;<span class="hljs-built_in">String</span>&gt; = Mutex::new(<span class="hljs-built_in">String</span>::new());
<span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> thread_handles = <span class="hljs-built_in">Vec</span>::new();
<span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>..<span class="hljs-number">10</span> {
    <span class="hljs-keyword">let</span> thread_handle = thread::spawn(|| {
        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> guard: MutexGuard&lt;<span class="hljs-built_in">String</span>&gt; =
            my_string.lock().unwrap();
        guard.push_str(<span class="hljs-string">"some characters"</span>);
    });
    thread_handles.push(thread_handle);
}
<span class="hljs-keyword">for</span> thread_handle <span class="hljs-keyword">in</span> thread_handles {
    thread_handle.join().unwrap();
}</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                            <pre style="position: relative;"><code data-trim="" class="hljs pgsql">error[E0373]: closure may outlive the <span class="hljs-keyword">current</span> <span class="hljs-keyword">function</span>, but it borrows `my_string`, which <span class="hljs-keyword">is</span> <span class="hljs-keyword">owned</span> <span class="hljs-keyword">by</span> the <span class="hljs-keyword">current</span> <span class="hljs-keyword">function</span>
  <span class="hljs-comment">--&gt; src/main.rs:9:43</span>
   |
<span class="hljs-number">9</span>  |         let thread_handle = thread::spawn(|| {
   |                                           ^^ may outlive borrowed <span class="hljs-keyword">value</span> `my_string`
<span class="hljs-number">10</span> |             let mut guard: MutexGuard&lt;String&gt; =
<span class="hljs-number">11</span> |                 my_string.<span class="hljs-keyword">lock</span>().unwrap();
   |                 <span class="hljs-comment">--------- `my_string` is borrowed here</span>
   |</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                </section>




                <section style="font-size: 1.5em; top: 476px; display: none;" hidden="" aria-hidden="true" class="future">
                    How does Rust know?
                    <div class="container">
                        <div class="col">
                            <tt>for_each</tt>
                            <pre class="rust" style="position: relative;"><code data-trim="" data-line-numbers="" class="hljs"><table class="hljs-ln"><tbody><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">for_each</span></span>&lt;OP&gt;(<span class="hljs-keyword">self</span>, op: OP)</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">where</span></div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    OP: <span class="hljs-built_in">Fn</span>(Self::Item) + <span class="hljs-built_in">Sync</span> + <span class="hljs-built_in">Send</span>,</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">{</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    for_each::for_each(<span class="hljs-keyword">self</span>, &amp;op)</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">}</div></td></tr></tbody></table></code><code data-trim="" data-line-numbers="3" class="hljs fragment has-highlights" data-fragment-index="0"><table class="hljs-ln"><tbody><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">for_each</span></span>&lt;OP&gt;(<span class="hljs-keyword">self</span>, op: OP)</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">where</span></div></td></tr><tr class="highlight-line"><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    OP: <span class="hljs-built_in">Fn</span>(Self::Item) + <span class="hljs-built_in">Sync</span> + <span class="hljs-built_in">Send</span>,</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">{</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    for_each::for_each(<span class="hljs-keyword">self</span>, &amp;op)</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">}</div></td></tr></tbody></table></code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                        </div>
                        <div class="col">
                            <tt>spawn</tt>
                            <pre class="rust" style="position: relative;"><code data-trim="" data-line-numbers="" class="hljs"><table class="hljs-ln"><tbody><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">pub</span> <span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">spawn</span></span>&lt;F, T&gt;(f: F) -&gt; JoinHandle&lt;T&gt;</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">where</span></div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    F: <span class="hljs-built_in">FnOnce</span>() -&gt; T,</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    F: <span class="hljs-built_in">Send</span> + <span class="hljs-symbol">'static</span>,</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    T: <span class="hljs-built_in">Send</span> + <span class="hljs-symbol">'static</span>,</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">{</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    Builder::new()</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">        .spawn(f)</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">        .expect(<span class="hljs-string">"failed to spawn thread"</span>)</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">}</div></td></tr></tbody></table></code><code data-trim="" data-line-numbers="3-5" class="hljs fragment has-highlights" data-fragment-index="1"><table class="hljs-ln"><tbody><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">pub</span> <span class="hljs-function"><span class="hljs-keyword">fn</span> <span class="hljs-title">spawn</span></span>&lt;F, T&gt;(f: F) -&gt; JoinHandle&lt;T&gt;</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">where</span></div></td></tr><tr class="highlight-line"><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    F: <span class="hljs-built_in">FnOnce</span>() -&gt; T,</div></td></tr><tr class="highlight-line"><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    F: <span class="hljs-built_in">Send</span> + <span class="hljs-symbol">'static</span>,</div></td></tr><tr class="highlight-line"><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    T: <span class="hljs-built_in">Send</span> + <span class="hljs-symbol">'static</span>,</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">{</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    Builder::new()</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">        .spawn(f)</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">        .expect(<span class="hljs-string">"failed to spawn thread"</span>)</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">}</div></td></tr></tbody></table></code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                        </div>
                    </div>
                </section>




                <section style="font-size: 1.5em; top: 476px; display: none;" hidden="" aria-hidden="true" class="future">
                    A mutex on the heap
                    <div class="container">
                        <div class="col">
                            C++
                            <pre class="cpp" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-built_in">shared_ptr</span>&lt;pair&lt;mutex, <span class="hljs-built_in">string</span>&gt;&gt; my_pair =
    make_shared&lt;pair&lt;mutex, <span class="hljs-built_in">string</span>&gt;&gt;();
<span class="hljs-built_in">vector</span>&lt;thread&gt; thread_handles;
<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) {
  <span class="hljs-function">thread <span class="hljs-title">thread_handle</span><span class="hljs-params">([=] {
    lock_guard&lt;mutex&gt; guard(my_pair-&gt;first);
    my_pair-&gt;second += <span class="hljs-string">"some characters"</span>;
  })</span></span>;
  thread_handles.push_back(move(thread_handle));
}
<span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;thread_handle : thread_handles) {
  thread_handle.join();
}</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                        </div>
                        <div class="col">
                            Rust
                            <pre class="rust" style="position: relative;"><code data-trim="" class="hljs"><span class="hljs-keyword">let</span> my_string: Arc&lt;Mutex&lt;<span class="hljs-built_in">String</span>&gt;&gt; =
    Arc::new(Mutex::new(<span class="hljs-built_in">String</span>::new()));
<span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> thread_handles = <span class="hljs-built_in">Vec</span>::new();
<span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>..<span class="hljs-number">10</span> {
    <span class="hljs-keyword">let</span> arc_clone = my_string.clone();
    <span class="hljs-keyword">let</span> thread_handle = thread::spawn(<span class="hljs-keyword">move</span> || {
        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> guard: MutexGuard&lt;<span class="hljs-built_in">String</span>&gt; =
            arc_clone.lock().unwrap();
        guard.push_str(<span class="hljs-string">"some characters"</span>);
    });
    thread_handles.push(thread_handle);
}
<span class="hljs-keyword">for</span> thread_handle <span class="hljs-keyword">in</span> thread_handles {
    thread_handle.join().unwrap();
}</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                        </div>
                    </div>
                </section>




                <section style="font-size: 1.3em; top: 476px; display: none;" hidden="" aria-hidden="true" class="future">
                    Forgetting the mutex
                    <div class="container">
                        <div class="col">
                            C++
                            <pre class="cpp" style="position: relative;"><code data-trim="" data-line-numbers="" class="hljs"><table class="hljs-ln"><tbody><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">shared_ptr</span>&lt;pair&lt;mutex, <span class="hljs-built_in">string</span>&gt;&gt; my_pair =</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    make_shared&lt;pair&lt;mutex, <span class="hljs-built_in">string</span>&gt;&gt;();</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">vector</span>&lt;thread&gt; thread_handles;</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) {</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">  <span class="hljs-function">thread <span class="hljs-title">thread_handle</span><span class="hljs-params"><span class="hljs-params">([=] {</span></span></span></div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-params">    my_pair-&gt;second += <span class="hljs-string">"some characters"</span>;</span></div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-params">  })</span>;</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">  thread_handles.push_back(move(thread_handle));</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">}</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;thread_handle : thread_handles) {</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">  thread_handle.join();</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">}</div></td></tr></tbody></table></code><code data-trim="" data-line-numbers="6" class="hljs fragment has-highlights" data-fragment-index="0"><table class="hljs-ln"><tbody><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">shared_ptr</span>&lt;pair&lt;mutex, <span class="hljs-built_in">string</span>&gt;&gt; my_pair =</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    make_shared&lt;pair&lt;mutex, <span class="hljs-built_in">string</span>&gt;&gt;();</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">vector</span>&lt;thread&gt; thread_handles;</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) {</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">  <span class="hljs-function">thread <span class="hljs-title">thread_handle</span><span class="hljs-params"><span class="hljs-params">([=] {</span></span></span></div></td></tr><tr class="highlight-line"><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-params">    my_pair-&gt;second += <span class="hljs-string">"some characters"</span>;</span></div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-params">  })</span>;</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">  thread_handles.push_back(move(thread_handle));</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">}</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;thread_handle : thread_handles) {</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">  thread_handle.join();</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">}</div></td></tr></tbody></table></code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                        </div>
                        <div class="col">
                            Rust
                            <pre class="rust" style="position: relative;"><code data-trim="" data-line-numbers="" class="hljs"><table class="hljs-ln"><tbody><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">let</span> my_string: Arc&lt;<span class="hljs-built_in">String</span>&gt; = Arc::new(<span class="hljs-built_in">String</span>::new());</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> thread_handles = <span class="hljs-built_in">Vec</span>::new();</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>..<span class="hljs-number">10</span> {</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> arc_clone = my_string.clone();</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">let</span> thread_handle = thread::spawn(<span class="hljs-keyword">move</span> || {</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">        arc_clone.push_str(<span class="hljs-string">"some characters"</span>);</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    });</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    thread_handles.push(thread_handle);</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">}</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">for</span> thread_handle <span class="hljs-keyword">in</span> thread_handles {</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    thread_handle.join().unwrap();</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">}</div></td></tr></tbody></table></code><code data-trim="" data-line-numbers="1,6" class="hljs fragment has-highlights" data-fragment-index="1"><table class="hljs-ln"><tbody><tr class="highlight-line"><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">let</span> my_string: Arc&lt;<span class="hljs-built_in">String</span>&gt; = Arc::new(<span class="hljs-built_in">String</span>::new());</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> thread_handles = <span class="hljs-built_in">Vec</span>::new();</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>..<span class="hljs-number">10</span> {</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> arc_clone = my_string.clone();</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">let</span> thread_handle = thread::spawn(<span class="hljs-keyword">move</span> || {</div></td></tr><tr class="highlight-line"><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">        arc_clone.push_str(<span class="hljs-string">"some characters"</span>);</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    });</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    thread_handles.push(thread_handle);</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">}</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">for</span> thread_handle <span class="hljs-keyword">in</span> thread_handles {</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    thread_handle.join().unwrap();</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">}</div></td></tr></tbody></table></code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                        </div>
                    </div>
                </section>
                <section style="font-size: 1.3em; top: 476px; display: none;" hidden="" aria-hidden="true" class="future">
                            C++
                            <pre class="cpp" style="position: relative;"><code data-trim="" data-line-numbers="6" class="hljs has-highlights"><table class="hljs-ln"><tbody><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">shared_ptr</span>&lt;pair&lt;mutex, <span class="hljs-built_in">string</span>&gt;&gt; my_pair =</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    make_shared&lt;pair&lt;mutex, <span class="hljs-built_in">string</span>&gt;&gt;();</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">vector</span>&lt;thread&gt; thread_handles;</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) {</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">  <span class="hljs-function">thread <span class="hljs-title">thread_handle</span><span class="hljs-params"><span class="hljs-params">([=] {</span></span></span></div></td></tr><tr class="highlight-line"><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-params">    my_pair-&gt;second += <span class="hljs-string">"some characters"</span>;</span></div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-params">  })</span>;</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">  thread_handles.push_back(move(thread_handle));</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">}</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;thread_handle : thread_handles) {</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">  thread_handle.join();</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">}</div></td></tr></tbody></table></code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                            <pre style="position: relative;"><code data-trim="" class="hljs gradle">WARNING: ThreadSanitizer: data race (pid=<span class="hljs-number">64280</span>)
  <span class="hljs-keyword">Read</span> of <span class="hljs-keyword">size</span> <span class="hljs-number">8</span> at <span class="hljs-number">0</span>x7b0800001020 by thread T3:
    #<span class="hljs-number">0</span> memcpy <span class="hljs-regexp">/build/g</span>cc<span class="hljs-regexp">/src/g</span>cc<span class="hljs-regexp">/libsanitizer/</span>sanitizer_common/sanitizer_common_interceptors.inc:<span class="hljs-number">806</span> (libtsan.so.<span class="hljs-number">0</span>+<span class="hljs-number">0</span>x41fdd)
    #<span class="hljs-number">1</span> memcpy <span class="hljs-regexp">/build/g</span>cc<span class="hljs-regexp">/src/g</span>cc<span class="hljs-regexp">/libsanitizer/</span>sanitizer_common/sanitizer_common_interceptors.inc:<span class="hljs-number">798</span> (libtsan.so.<span class="hljs-number">0</span>+<span class="hljs-number">0</span>x41fdd)
    #<span class="hljs-number">2</span> std::char_traits&lt;<span class="hljs-keyword">char</span>&gt;::<span class="hljs-keyword">copy</span>(<span class="hljs-keyword">char</span>*, <span class="hljs-keyword">char</span> const*, unsigned <span class="hljs-keyword">long</span>) <span class="hljs-regexp">/build/g</span>cc<span class="hljs-regexp">/src/g</span>cc-build<span class="hljs-regexp">/x86_64-pc-linux-gnu/</span>libstdc++-v3<span class="hljs-regexp">/include/</span>bits/char_traits.h:<span class="hljs-number">395</span> (libstdc++.so.<span class="hljs-number">6</span>+<span class="hljs-number">0</span>x13e11f)
    #<span class="hljs-number">3</span> std::__cxx11::basic_string&lt;<span class="hljs-keyword">char</span>, std::char_traits&lt;<span class="hljs-keyword">char</span>&gt;, std::allocator&lt;<span class="hljs-keyword">char</span>&gt; &gt;::_S_copy(<span class="hljs-keyword">char</span>*, <span class="hljs-keyword">char</span> const*, unsigned <span class="hljs-keyword">long</span>) <span class="hljs-regexp">/build/g</span>cc<span class="hljs-regexp">/src/g</span>cc-build<span class="hljs-regexp">/x86_64-pc-linux-gnu/</span>libstdc++-v3<span class="hljs-regexp">/include/</span>bits/basic_string.h:<span class="hljs-number">351</span> (libstdc++.so.<span class="hljs-number">6</span>+<span class="hljs-number">0</span>x13e11f)
    #<span class="hljs-number">4</span> std::__cxx11::basic_string&lt;<span class="hljs-keyword">char</span>, std::char_traits&lt;<span class="hljs-keyword">char</span>&gt;, std::allocator&lt;<span class="hljs-keyword">char</span>&gt; &gt;::_S_copy(<span class="hljs-keyword">char</span>*, <span class="hljs-keyword">char</span> const*, unsigned <span class="hljs-keyword">long</span>) <span class="hljs-regexp">/build/g</span>cc<span class="hljs-regexp">/src/g</span>cc-build<span class="hljs-regexp">/x86_64-pc-linux-gnu/</span>libstdc++-v3<span class="hljs-regexp">/include/</span>bits/basic_string.h:<span class="hljs-number">346</span> (libstdc++.so.<span class="hljs-number">6</span>+<span class="hljs-number">0</span>x13e11f)
    #<span class="hljs-number">5</span> std::__cxx11::basic_string&lt;<span class="hljs-keyword">char</span>, std::char_traits&lt;<span class="hljs-keyword">char</span>&gt;, std::allocator&lt;<span class="hljs-keyword">char</span>&gt; &gt;::_M_mutate(unsigned <span class="hljs-keyword">long</span>, unsigned <span class="hljs-keyword">long</span>, <span class="hljs-keyword">char</span> const*, unsigned <span class="hljs-keyword">long</span>) <span class="hljs-regexp">/build/g</span>cc<span class="hljs-regexp">/src/g</span>cc-build<span class="hljs-regexp">/x86_64-pc-linux-gnu/</span>libstdc++-v3<span class="hljs-regexp">/include/</span>bits/basic_string.tcc:<span class="hljs-number">320</span> (libstdc++.so.<span class="hljs-number">6</span>+<span class="hljs-number">0</span>x13e11f)
    #<span class="hljs-number">6</span> <span class="hljs-keyword">void</span> std::__invoke_impl&lt;<span class="hljs-keyword">void</span>, forgot_mutex()::{lambda()#<span class="hljs-number">1</span>}&gt;(std::__invoke_other, forgot_mutex()::{lambda()#<span class="hljs-number">1</span>}&amp;&amp;) &lt;<span class="hljs-keyword">null</span>&gt; (mutex+<span class="hljs-number">0</span>x5d42)
    #<span class="hljs-number">7</span> std::__invoke_result&lt;forgot_mutex()::{lambda()#<span class="hljs-number">1</span>}&gt;::type std::__invoke&lt;forgot_mutex()::{lambda()#<span class="hljs-number">1</span>}&gt;(std::__invoke_result&amp;&amp;, (forgot_mutex()::{lambda()#<span class="hljs-number">1</span>}&amp;&amp;)...) &lt;<span class="hljs-keyword">null</span>&gt; (mutex+<span class="hljs-number">0</span>x592d)
    #<span class="hljs-number">8</span> <span class="hljs-keyword">void</span> std::thread::_Invoker&lt;std::tuple&lt;forgot_mutex()::{lambda()#<span class="hljs-number">1</span>}&gt; &gt;::_M_invoke&lt;<span class="hljs-number">0</span>ul&gt;(std::_Index_tuple&lt;<span class="hljs-number">0</span>ul&gt;) &lt;<span class="hljs-keyword">null</span>&gt; (mutex+<span class="hljs-number">0</span>x557a)</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                </section>
                <section style="font-size: 1.3em; top: 476px; display: none;" hidden="" aria-hidden="true" class="future">
                            Rust
                            <pre class="rust" style="position: relative;"><code data-trim="" data-line-numbers="6" class="hljs has-highlights"><table class="hljs-ln"><tbody><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">let</span> my_string: Arc&lt;<span class="hljs-built_in">String</span>&gt; = Arc::new(<span class="hljs-built_in">String</span>::new());</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> thread_handles = <span class="hljs-built_in">Vec</span>::new();</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>..<span class="hljs-number">10</span> {</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> arc_clone = my_string.clone();</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">let</span> thread_handle = thread::spawn(<span class="hljs-keyword">move</span> || {</div></td></tr><tr class="highlight-line"><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">        arc_clone.push_str(<span class="hljs-string">"some characters"</span>);</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    });</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    thread_handles.push(thread_handle);</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">}</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">for</span> thread_handle <span class="hljs-keyword">in</span> thread_handles {</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    thread_handle.join().unwrap();</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">}</div></td></tr></tbody></table></code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                            <pre style="position: relative;"><code data-trim="" class="hljs applescript"><span class="hljs-keyword">error</span>[E0596]: cannot borrow data <span class="hljs-keyword">in</span> an `Arc` <span class="hljs-keyword">as</span> mutable     
  <span class="hljs-comment">--&gt; src/main.rs:46:13</span>
   |
<span class="hljs-number">46</span> |             arc_clone.push_str(<span class="hljs-string">"some characters"</span>);
   |             ^^^^^^^^^ cannot borrow <span class="hljs-keyword">as</span> mutable 
   |
   = help: trait `DerefMut` <span class="hljs-keyword">is</span> required <span class="hljs-keyword">to</span> modify <span class="hljs-keyword">through</span> a dereference, <span class="hljs-keyword">but</span> <span class="hljs-keyword">it</span> <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> implemented <span class="hljs-keyword">for</span> `Arc&lt;String&gt;`</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                </section>




                <section style="font-size: 1.3em; top: 476px; display: none;" hidden="" aria-hidden="true" class="future">
                    Writing under a read lock
                    <div class="container">
                        <div class="col">
                            C++
                            <pre class="cpp" style="position: relative;"><code data-trim="" data-line-numbers="" class="hljs"><table class="hljs-ln"><tbody><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">shared_ptr</span>&lt;pair&lt;shared_mutex, <span class="hljs-built_in">string</span>&gt;&gt; my_pair =</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    make_shared&lt;pair&lt;shared_mutex, <span class="hljs-built_in">string</span>&gt;&gt;();</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">vector</span>&lt;thread&gt; thread_handles;</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) {</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">  <span class="hljs-function">thread <span class="hljs-title">thread_handle</span><span class="hljs-params"><span class="hljs-params">([=] {</span></span></span></div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-params">    shared_lock&lt;shared_mutex&gt; guard(my_pair-&gt;first);</span></div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-params">    my_pair-&gt;second += <span class="hljs-string">"some characters"</span>;</span></div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-params">  })</span>;</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">  thread_handles.push_back(move(thread_handle));</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">}</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;thread_handle : thread_handles) {</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">  thread_handle.join();</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">}</div></td></tr></tbody></table></code><code data-trim="" data-line-numbers="1-2,6" class="hljs fragment has-highlights" data-fragment-index="0"><table class="hljs-ln"><tbody><tr class="highlight-line"><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">shared_ptr</span>&lt;pair&lt;shared_mutex, <span class="hljs-built_in">string</span>&gt;&gt; my_pair =</div></td></tr><tr class="highlight-line"><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    make_shared&lt;pair&lt;shared_mutex, <span class="hljs-built_in">string</span>&gt;&gt;();</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">vector</span>&lt;thread&gt; thread_handles;</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) {</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">  <span class="hljs-function">thread <span class="hljs-title">thread_handle</span><span class="hljs-params"><span class="hljs-params">([=] {</span></span></span></div></td></tr><tr class="highlight-line"><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-params">    shared_lock&lt;shared_mutex&gt; guard(my_pair-&gt;first);</span></div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-params">    my_pair-&gt;second += <span class="hljs-string">"some characters"</span>;</span></div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-params">  })</span>;</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">  thread_handles.push_back(move(thread_handle));</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">}</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;thread_handle : thread_handles) {</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">  thread_handle.join();</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">}</div></td></tr></tbody></table></code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                        </div>
                        <div class="col">
                            Rust
                            <pre class="rust" style="position: relative;"><code data-trim="" data-line-numbers="" class="hljs"><table class="hljs-ln"><tbody><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">let</span> my_string: Arc&lt;RwLock&lt;<span class="hljs-built_in">String</span>&gt;&gt; =</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    Arc::new(RwLock::new(<span class="hljs-built_in">String</span>::new()));</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> thread_handles = <span class="hljs-built_in">Vec</span>::new();</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>..<span class="hljs-number">10</span> {</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">let</span> arc_clone = my_string.clone();</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">let</span> thread_handle = thread::spawn(<span class="hljs-keyword">move</span> || {</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> guard: RwLockReadGuard&lt;<span class="hljs-built_in">String</span>&gt; =</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">            arc_clone.read().unwrap();</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">        guard.push_str(<span class="hljs-string">"some characters"</span>);</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    });</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    thread_handles.push(thread_handle);</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">}</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">for</span> thread_handle <span class="hljs-keyword">in</span> thread_handles {</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    thread_handle.join().unwrap();</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">}</div></td></tr></tbody></table></code><code data-trim="" data-line-numbers="1-2,7-8" class="hljs fragment has-highlights" data-fragment-index="1"><table class="hljs-ln"><tbody><tr class="highlight-line"><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">let</span> my_string: Arc&lt;RwLock&lt;<span class="hljs-built_in">String</span>&gt;&gt; =</div></td></tr><tr class="highlight-line"><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    Arc::new(RwLock::new(<span class="hljs-built_in">String</span>::new()));</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> thread_handles = <span class="hljs-built_in">Vec</span>::new();</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>..<span class="hljs-number">10</span> {</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">let</span> arc_clone = my_string.clone();</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">let</span> thread_handle = thread::spawn(<span class="hljs-keyword">move</span> || {</div></td></tr><tr class="highlight-line"><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> guard: RwLockReadGuard&lt;<span class="hljs-built_in">String</span>&gt; =</div></td></tr><tr class="highlight-line"><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">            arc_clone.read().unwrap();</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">        guard.push_str(<span class="hljs-string">"some characters"</span>);</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    });</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    thread_handles.push(thread_handle);</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">}</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">for</span> thread_handle <span class="hljs-keyword">in</span> thread_handles {</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    thread_handle.join().unwrap();</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">}</div></td></tr></tbody></table></code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                        </div>
                    </div>
                </section>
                <section style="font-size: 1.3em; top: 476px; display: none;" hidden="" aria-hidden="true" class="future">
                            Rust
                            <pre class="rust" style="position: relative;"><code data-trim="" data-line-numbers="1-2,7-8" class="hljs has-highlights"><table class="hljs-ln"><tbody><tr class="highlight-line"><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">let</span> my_string: Arc&lt;RwLock&lt;<span class="hljs-built_in">String</span>&gt;&gt; =</div></td></tr><tr class="highlight-line"><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    Arc::new(RwLock::new(<span class="hljs-built_in">String</span>::new()));</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> thread_handles = <span class="hljs-built_in">Vec</span>::new();</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>..<span class="hljs-number">10</span> {</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">let</span> arc_clone = my_string.clone();</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">let</span> thread_handle = thread::spawn(<span class="hljs-keyword">move</span> || {</div></td></tr><tr class="highlight-line"><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> guard: RwLockReadGuard&lt;<span class="hljs-built_in">String</span>&gt; =</div></td></tr><tr class="highlight-line"><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">            arc_clone.read().unwrap();</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">        guard.push_str(<span class="hljs-string">"some characters"</span>);</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    });</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    thread_handles.push(thread_handle);</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">}</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">for</span> thread_handle <span class="hljs-keyword">in</span> thread_handles {</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    thread_handle.join().unwrap();</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">}</div></td></tr></tbody></table></code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                            <pre style="position: relative;"><code data-trim="" class="hljs ocaml">error[<span class="hljs-type">E0596</span>]: cannot borrow data <span class="hljs-keyword">in</span> a dereference <span class="hljs-keyword">of</span> <span class="hljs-type">`RwLockReadGuard</span>&lt;<span class="hljs-symbol">'_</span>, <span class="hljs-type">String</span>&gt;` <span class="hljs-keyword">as</span> <span class="hljs-keyword">mutable</span>
  --&gt; src/main.rs:<span class="hljs-number">65</span>:<span class="hljs-number">13</span>
   |
<span class="hljs-number">65</span> |             guard.push_str(<span class="hljs-string">"some characters"</span>);
   |             ^^^^^ cannot borrow <span class="hljs-keyword">as</span> <span class="hljs-keyword">mutable</span>
   |
   = help: trait <span class="hljs-type">`DerefMut</span>` is required <span class="hljs-keyword">to</span> modify through a dereference, but it is not implemented <span class="hljs-keyword">for</span> <span class="hljs-type">`RwLockReadGuard</span>&lt;<span class="hljs-symbol">'_</span>, <span class="hljs-type">String</span>&gt;`</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                </section>





                <section style="font-size: 2em; top: 476px; display: none;" hidden="" aria-hidden="true" class="future">
                    <p>Louis Brandy's vexing parse</p>

                    <a href="https://youtu.be/lkgszkPnV8g?t=1750"><img src="./Firehose of Rust_files/brandy_problem.png" width="80%"></a>
                </section>




                <section style="font-size: 1.3em; top: 476px; display: none;" hidden="" aria-hidden="true" class="future">
                    Rust giveth and Rust taketh away
                    <div class="container">
                        <div class="col">
                            C++
                            <pre class="cpp" style="position: relative;"><code data-trim="" data-line-numbers="" class="hljs"><table class="hljs-ln"><tbody><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">shared_ptr</span>&lt;pair&lt;mutex, <span class="hljs-built_in">string</span>&gt;&gt; my_pair =</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    make_shared&lt;pair&lt;mutex, <span class="hljs-built_in">string</span>&gt;&gt;();</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">vector</span>&lt;thread&gt; thread_handles;</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) {</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">  <span class="hljs-function">thread <span class="hljs-title">thread_handle</span><span class="hljs-params"><span class="hljs-params">([=] {</span></span></span></div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-params">    <span class="hljs-built_in">string</span> *smuggled_ptr;</span></div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-params">    {</span></div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-params">      lock_guard&lt;mutex&gt; guard(my_pair-&gt;first);</span></div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-params">      smuggled_ptr = &amp;my_pair-&gt;second;</span></div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-params">    }</span></div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-params">    *smuggled_ptr += <span class="hljs-string">"some characters"</span>;</span></div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-params">  })</span>;</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">  thread_handles.push_back(move(thread_handle));</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">}</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;thread_handle : thread_handles) {</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">  thread_handle.join();</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">}</div></td></tr></tbody></table></code><code data-trim="" data-line-numbers="6-11" class="hljs fragment has-highlights" data-fragment-index="0"><table class="hljs-ln"><tbody><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">shared_ptr</span>&lt;pair&lt;mutex, <span class="hljs-built_in">string</span>&gt;&gt; my_pair =</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    make_shared&lt;pair&lt;mutex, <span class="hljs-built_in">string</span>&gt;&gt;();</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-built_in">vector</span>&lt;thread&gt; thread_handles;</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) {</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">  <span class="hljs-function">thread <span class="hljs-title">thread_handle</span><span class="hljs-params"><span class="hljs-params">([=] {</span></span></span></div></td></tr><tr class="highlight-line"><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-params">    <span class="hljs-built_in">string</span> *smuggled_ptr;</span></div></td></tr><tr class="highlight-line"><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-params">    {</span></div></td></tr><tr class="highlight-line"><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-params">      lock_guard&lt;mutex&gt; guard(my_pair-&gt;first);</span></div></td></tr><tr class="highlight-line"><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-params">      smuggled_ptr = &amp;my_pair-&gt;second;</span></div></td></tr><tr class="highlight-line"><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-params">    }</span></div></td></tr><tr class="highlight-line"><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-params">    *smuggled_ptr += <span class="hljs-string">"some characters"</span>;</span></div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-params">  })</span>;</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">  thread_handles.push_back(move(thread_handle));</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">}</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> &amp;thread_handle : thread_handles) {</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">  thread_handle.join();</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">}</div></td></tr></tbody></table></code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                        </div>
                        <div class="col">
                            Rust
                            <pre class="rust" style="position: relative;"><code data-trim="" data-line-numbers="" class="hljs"><table class="hljs-ln"><tbody><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">let</span> my_string: Arc&lt;Mutex&lt;<span class="hljs-built_in">String</span>&gt;&gt; =</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    Arc::new(Mutex::new(<span class="hljs-built_in">String</span>::new()));</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> thread_handles = <span class="hljs-built_in">Vec</span>::new();</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>..<span class="hljs-number">10</span> {</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">let</span> arc_clone = my_string.clone();</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">let</span> thread_handle = thread::spawn(<span class="hljs-keyword">move</span> || {</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> guard = arc_clone.lock().unwrap();</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">let</span> smuggled_ptr: &amp;<span class="hljs-keyword">mut</span> <span class="hljs-built_in">String</span> = &amp;<span class="hljs-keyword">mut</span> *guard;</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-built_in">drop</span>(guard);</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">        smuggled_ptr.push_str(<span class="hljs-string">"some characters"</span>);</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    });</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    thread_handles.push(thread_handle);</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">}</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">for</span> thread_handle <span class="hljs-keyword">in</span> thread_handles {</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    thread_handle.join().unwrap();</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">}</div></td></tr></tbody></table></code><code data-trim="" data-line-numbers="7-10" class="hljs fragment has-highlights" data-fragment-index="1"><table class="hljs-ln"><tbody><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">let</span> my_string: Arc&lt;Mutex&lt;<span class="hljs-built_in">String</span>&gt;&gt; =</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    Arc::new(Mutex::new(<span class="hljs-built_in">String</span>::new()));</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> thread_handles = <span class="hljs-built_in">Vec</span>::new();</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>..<span class="hljs-number">10</span> {</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">let</span> arc_clone = my_string.clone();</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">let</span> thread_handle = thread::spawn(<span class="hljs-keyword">move</span> || {</div></td></tr><tr class="highlight-line"><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> guard = arc_clone.lock().unwrap();</div></td></tr><tr class="highlight-line"><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">let</span> smuggled_ptr: &amp;<span class="hljs-keyword">mut</span> <span class="hljs-built_in">String</span> = &amp;<span class="hljs-keyword">mut</span> *guard;</div></td></tr><tr class="highlight-line"><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-built_in">drop</span>(guard);</div></td></tr><tr class="highlight-line"><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">        smuggled_ptr.push_str(<span class="hljs-string">"some characters"</span>);</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    });</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    thread_handles.push(thread_handle);</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">}</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">for</span> thread_handle <span class="hljs-keyword">in</span> thread_handles {</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    thread_handle.join().unwrap();</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">}</div></td></tr></tbody></table></code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                        </div>
                    </div>
                </section>
                <section style="font-size: 1.3em; top: 476px; display: none;" hidden="" aria-hidden="true" class="future">
                            Rust giveth and Rust taketh away
                            <pre class="rust" style="position: relative;"><code data-trim="" data-line-numbers="7-10" class="hljs has-highlights"><table class="hljs-ln"><tbody><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">let</span> my_string: Arc&lt;Mutex&lt;<span class="hljs-built_in">String</span>&gt;&gt; =</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    Arc::new(Mutex::new(<span class="hljs-built_in">String</span>::new()));</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> thread_handles = <span class="hljs-built_in">Vec</span>::new();</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>..<span class="hljs-number">10</span> {</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">let</span> arc_clone = my_string.clone();</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    <span class="hljs-keyword">let</span> thread_handle = thread::spawn(<span class="hljs-keyword">move</span> || {</div></td></tr><tr class="highlight-line"><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut</span> guard = arc_clone.lock().unwrap();</div></td></tr><tr class="highlight-line"><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-keyword">let</span> smuggled_ptr: &amp;<span class="hljs-keyword">mut</span> <span class="hljs-built_in">String</span> = &amp;<span class="hljs-keyword">mut</span> *guard;</div></td></tr><tr class="highlight-line"><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">        <span class="hljs-built_in">drop</span>(guard);</div></td></tr><tr class="highlight-line"><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">        smuggled_ptr.push_str(<span class="hljs-string">"some characters"</span>);</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    });</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    thread_handles.push(thread_handle);</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">}</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">for</span> thread_handle <span class="hljs-keyword">in</span> thread_handles {</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">    thread_handle.join().unwrap();</div></td></tr><tr><td class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></td><td class="hljs-ln-code"><div class="hljs-ln-line">}</div></td></tr></tbody></table></code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                            <pre style="position: relative;"><code data-trim="" class="hljs coq">error[E0505]: cannot <span class="hljs-built_in">move</span> out of `guard` because it is borrowed
  --&gt; src/main.rs:<span class="hljs-number">84</span>:<span class="hljs-number">18</span>
   |
<span class="hljs-type">83</span> |             <span class="hljs-type">let</span> smuggled_ptr: &amp;mut String = &amp;mut *guard;
   |                                                   <span class="hljs-type">----- borrow</span> of `guard` occurs here
<span class="hljs-number">84</span> |             <span class="hljs-type">drop</span>(guard);
   |                  <span class="hljs-type">^^^^^ move</span> out of `guard` occurs here
<span class="hljs-number">85</span> |             <span class="hljs-type">smuggled_ptr</span>.push_str(<span class="hljs-string">"some characters"</span>);
   |             <span class="hljs-type">------------ borrow</span> later used here</code><div class="open_grepper_editor" title="Edit &amp; Save To Grepper"></div></pre>
                </section>


            </div>
        <div class="backgrounds"><div class="slide-background present" data-loaded="true" style="display: block;"><div class="slide-background-content"></div></div><div class="slide-background future" data-loaded="true" style="display: block;"><div class="slide-background-content"></div></div><div class="slide-background future" data-loaded="true" style="display: block;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div><div class="slide-background future" style="display: none;"><div class="slide-background-content"></div></div></div><div class="slide-number" style="display: none;"></div><aside class="controls" data-controls-layout="bottom-right" data-controls-back-arrows="faded" style="display: block;"><button class="navigate-left" aria-label="previous slide" disabled="disabled"><div class="controls-arrow"></div></button>
			<button class="navigate-right enabled highlight" aria-label="next slide"><div class="controls-arrow"></div></button>
			<button class="navigate-up" aria-label="above slide" disabled="disabled"><div class="controls-arrow"></div></button>
			<button class="navigate-down" aria-label="below slide" disabled="disabled"><div class="controls-arrow"></div></button></aside><div class="progress" style="display: block;"><span style="transform: scaleX(0);"></span></div><div class="speaker-notes" data-prevent-swipe="" tabindex="0"></div><div class="pause-overlay"><button class="resume-button">Resume presentation</button></div><div class="aria-status" aria-live="polite" aria-atomic="true" style="position: absolute; height: 1px; width: 1px; overflow: hidden; clip: rect(1px, 1px, 1px, 1px);">A Firehose of Rust for busy people who know some C++ </div></div>

        <script src="./Firehose of Rust_files/reveal.js"></script>
        <script src="./Firehose of Rust_files/notes.js"></script>
        <script src="./Firehose of Rust_files/markdown.js"></script>
        <script src="./Firehose of Rust_files/highlight.js"></script>
        <script>
            // More info about initialization & config:
            // - https://revealjs.com/initialization/
            // - https://revealjs.com/config/
            Reveal.initialize({
                hash: true,

                width: "100%",
                height: "100%",
                margin: 0,

                transition: "none",

                // Learn about plugins: https://revealjs.com/plugins/
                plugins: [ RevealMarkdown, RevealHighlight, RevealNotes ]
            });
        </script>
    

</body><grammarly-desktop-integration data-grammarly-shadow-root="true"></grammarly-desktop-integration></html>